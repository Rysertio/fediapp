# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_api_v1_accounts_id(self, **kwargs):  # noqa: E501
        """Get account profile  # noqa: E501

        View information about a profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_with_http_info(self, **kwargs):  # noqa: E501
        """Get account profile  # noqa: E501

        View information about a profile.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: Account
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Account',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_featured_tags(self, id, **kwargs):  # noqa: E501
        """Featured tags  # noqa: E501

        Tags featured by this account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_featured_tags(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_featured_tags_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_featured_tags_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_featured_tags_with_http_info(self, id, **kwargs):  # noqa: E501
        """Featured tags  # noqa: E501

        Tags featured by this account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_featured_tags_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_featured_tags" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_api_v1_accounts_id_featured_tags`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/featured_tags', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_followers(self, id, **kwargs):  # noqa: E501
        """Get account's followers.  # noqa: E501

        Accounts which follow the given account, if network is not hidden by the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_followers(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :param object max_id:
        :param object since_id:
        :param object limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_followers_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_followers_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_followers_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get account's followers.  # noqa: E501

        Accounts which follow the given account, if network is not hidden by the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_followers_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :param object max_id:
        :param object since_id:
        :param object limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'max_id', 'since_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_followers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_api_v1_accounts_id_followers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'max_id' in params:
            form_params.append(('max_id', params['max_id']))  # noqa: E501
        if 'since_id' in params:
            form_params.append(('since_id', params['since_id']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['client-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/followers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_following(self, **kwargs):  # noqa: E501
        """List users following account  # noqa: E501

        Accounts which the given account is following, if network is not hidden by the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_following(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object max_id:
        :param object since_id:
        :param object limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_following_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_following_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_following_with_http_info(self, **kwargs):  # noqa: E501
        """List users following account  # noqa: E501

        Accounts which the given account is following, if network is not hidden by the account owner.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_following_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object max_id:
        :param object since_id:
        :param object limit:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['max_id', 'since_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_following" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'max_id' in params:
            form_params.append(('max_id', params['max_id']))  # noqa: E501
        if 'since_id' in params:
            form_params.append(('since_id', params['since_id']))  # noqa: E501
        if 'limit' in params:
            form_params.append(('limit', params['limit']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['client-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/following', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_identity_proofs(self, **kwargs):  # noqa: E501
        """Identity proofs for account  # noqa: E501

        Get the identity proofs for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_identity_proofs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_identity_proofs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_identity_proofs_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_identity_proofs_with_http_info(self, **kwargs):  # noqa: E501
        """Identity proofs for account  # noqa: E501

        Get the identity proofs for an account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_identity_proofs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_identity_proofs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/identity_proofs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_lists(self, id, **kwargs):  # noqa: E501
        """Lists containing this account  # noqa: E501

        User lists that you have added this account to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_lists(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_lists_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_lists_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_lists_with_http_info(self, id, **kwargs):  # noqa: E501
        """Lists containing this account  # noqa: E501

        User lists that you have added this account to.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_lists_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_lists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_api_v1_accounts_id_lists`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/lists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_id_statuses(self, id, **kwargs):  # noqa: E501
        """Statuses for user  # noqa: E501

        Statuses posted to the given account.  Public for public statuses only, or user_token + read:statuses (for private statuses the user is authorized to see).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_statuses(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_id_statuses_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_id_statuses_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_id_statuses_with_http_info(self, id, **kwargs):  # noqa: E501
        """Statuses for user  # noqa: E501

        Statuses posted to the given account.  Public for public statuses only, or user_token + read:statuses (for private statuses the user is authorized to see).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_id_statuses_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_id_statuses" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_api_v1_accounts_id_statuses`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/statuses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_api_v1_accounts_verify_credentials(self, **kwargs):  # noqa: E501
        """Verify account credentials  # noqa: E501

        Test to make sure that the user token works.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_verify_credentials(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_api_v1_accounts_verify_credentials_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_api_v1_accounts_verify_credentials_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_api_v1_accounts_verify_credentials_with_http_info(self, **kwargs):  # noqa: E501
        """Verify account credentials  # noqa: E501

        Test to make sure that the user token works.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_api_v1_accounts_verify_credentials_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_api_v1_accounts_verify_credentials" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/verify_credentials', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def patch_api_v1_accounts_update_credentials(self, **kwargs):  # noqa: E501
        """Update account credentials  # noqa: E501

        Update the user's display and preferences.  You should use `/api/v1/apps/verify_credentials` to first obtain plaintext representations from within the `source` parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_api_v1_accounts_update_credentials(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object discoverable:
        :param object bot:
        :param object display_name:
        :param object note:
        :param object avatar:
        :param object header:
        :param object locked:
        :param Apiv1accountsupdateCredentialsSource source:
        :param object fields_attributes:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.patch_api_v1_accounts_update_credentials_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.patch_api_v1_accounts_update_credentials_with_http_info(**kwargs)  # noqa: E501
            return data

    def patch_api_v1_accounts_update_credentials_with_http_info(self, **kwargs):  # noqa: E501
        """Update account credentials  # noqa: E501

        Update the user's display and preferences.  You should use `/api/v1/apps/verify_credentials` to first obtain plaintext representations from within the `source` parameter, then allow the user to edit these plaintext representations before submitting them through this API. The server will generate the corresponding HTML.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.patch_api_v1_accounts_update_credentials_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object discoverable:
        :param object bot:
        :param object display_name:
        :param object note:
        :param object avatar:
        :param object header:
        :param object locked:
        :param Apiv1accountsupdateCredentialsSource source:
        :param object fields_attributes:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['discoverable', 'bot', 'display_name', 'note', 'avatar', 'header', 'locked', 'source', 'fields_attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_api_v1_accounts_update_credentials" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'discoverable' in params:
            form_params.append(('discoverable', params['discoverable']))  # noqa: E501
        if 'bot' in params:
            form_params.append(('bot', params['bot']))  # noqa: E501
        if 'display_name' in params:
            form_params.append(('display_name', params['display_name']))  # noqa: E501
        if 'note' in params:
            form_params.append(('note', params['note']))  # noqa: E501
        if 'avatar' in params:
            form_params.append(('avatar', params['avatar']))  # noqa: E501
        if 'header' in params:
            form_params.append(('header', params['header']))  # noqa: E501
        if 'locked' in params:
            form_params.append(('locked', params['locked']))  # noqa: E501
        if 'source' in params:
            form_params.append(('source', params['source']))  # noqa: E501
        if 'fields_attributes' in params:
            form_params.append(('fields_attributes', params['fields_attributes']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/update_credentials', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_accounts(self, **kwargs):  # noqa: E501
        """Register an account  # noqa: E501

        Creates a user and account records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object username:
        :param object email:
        :param object password:
        :param object agreement:
        :param object locale:
        :param object reason:
        :return: AccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_api_v1_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Register an account  # noqa: E501

        Creates a user and account records.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object username:
        :param object email:
        :param object password:
        :param object agreement:
        :param object locale:
        :param object reason:
        :return: AccessToken
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'email', 'password', 'agreement', 'locale', 'reason']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'username' in params:
            form_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            form_params.append(('email', params['email']))  # noqa: E501
        if 'password' in params:
            form_params.append(('password', params['password']))  # noqa: E501
        if 'agreement' in params:
            form_params.append(('agreement', params['agreement']))  # noqa: E501
        if 'locale' in params:
            form_params.append(('locale', params['locale']))  # noqa: E501
        if 'reason' in params:
            form_params.append(('reason', params['reason']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['client-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AccessToken',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_accounts_id_follow(self, id, **kwargs):  # noqa: E501
        """Follow account  # noqa: E501

        Follows the given account. Can be used to update whether ot show reblogs or enable notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts_id_follow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :param object reblogs:
        :param object notify:
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_accounts_id_follow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_accounts_id_follow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_api_v1_accounts_id_follow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Follow account  # noqa: E501

        Follows the given account. Can be used to update whether ot show reblogs or enable notifications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts_id_follow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :param object reblogs:
        :param object notify:
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'reblogs', 'notify']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_accounts_id_follow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_api_v1_accounts_id_follow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'reblogs' in params:
            form_params.append(('reblogs', params['reblogs']))  # noqa: E501
        if 'notify' in params:
            form_params.append(('notify', params['notify']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/follow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Relationship',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_api_v1_accounts_id_unfollow(self, id, **kwargs):  # noqa: E501
        """Unfollow  # noqa: E501

        Unfollow the given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts_id_unfollow(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_api_v1_accounts_id_unfollow_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_api_v1_accounts_id_unfollow_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_api_v1_accounts_id_unfollow_with_http_info(self, id, **kwargs):  # noqa: E501
        """Unfollow  # noqa: E501

        Unfollow the given account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_api_v1_accounts_id_unfollow_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object id: The id of the account in the database. (required)
        :return: Relationship
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_api_v1_accounts_id_unfollow" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_api_v1_accounts_id_unfollow`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['user-token-auth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/accounts/{id}/unfollow', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Relationship',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
