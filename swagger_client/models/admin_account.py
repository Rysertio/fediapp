# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AdminAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'username': 'object',
        'domain': 'object',
        'created_at': 'object',
        'email': 'object',
        'ip': 'object',
        'locale': 'object',
        'invite_request': 'object',
        'role': 'object',
        'confirmed': 'object',
        'approved': 'object',
        'disabled': 'object',
        'silenced': 'object',
        'suspended': 'object',
        'account': 'Account',
        'created_by_application_id': 'object',
        'invited_by_account_id': 'object'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'domain': 'domain',
        'created_at': 'created_at',
        'email': 'email',
        'ip': 'ip',
        'locale': 'locale',
        'invite_request': 'invite_request',
        'role': 'role',
        'confirmed': 'confirmed',
        'approved': 'approved',
        'disabled': 'disabled',
        'silenced': 'silenced',
        'suspended': 'suspended',
        'account': 'account',
        'created_by_application_id': 'created_by_application_id',
        'invited_by_account_id': 'invited_by_account_id'
    }

    def __init__(self, id=None, username=None, domain=None, created_at=None, email=None, ip=None, locale=None, invite_request=None, role=None, confirmed=None, approved=None, disabled=None, silenced=None, suspended=None, account=None, created_by_application_id=None, invited_by_account_id=None):  # noqa: E501
        """AdminAccount - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._username = None
        self._domain = None
        self._created_at = None
        self._email = None
        self._ip = None
        self._locale = None
        self._invite_request = None
        self._role = None
        self._confirmed = None
        self._approved = None
        self._disabled = None
        self._silenced = None
        self._suspended = None
        self._account = None
        self._created_by_application_id = None
        self._invited_by_account_id = None
        self.discriminator = None
        self.id = id
        self.username = username
        self.domain = domain
        self.created_at = created_at
        self.email = email
        self.ip = ip
        self.locale = locale
        self.invite_request = invite_request
        self.role = role
        self.confirmed = confirmed
        self.approved = approved
        self.disabled = disabled
        self.silenced = silenced
        self.suspended = suspended
        self.account = account
        if created_by_application_id is not None:
            self.created_by_application_id = created_by_application_id
        if invited_by_account_id is not None:
            self.invited_by_account_id = invited_by_account_id

    @property
    def id(self):
        """Gets the id of this AdminAccount.  # noqa: E501

        The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AdminAccount.

        The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this AdminAccount.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self):
        """Gets the username of this AdminAccount.  # noqa: E501

        The username of the account.  # noqa: E501

        :return: The username of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AdminAccount.

        The username of the account.  # noqa: E501

        :param username: The username of this AdminAccount.  # noqa: E501
        :type: object
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def domain(self):
        """Gets the domain of this AdminAccount.  # noqa: E501

        The domain of the account.  # noqa: E501

        :return: The domain of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this AdminAccount.

        The domain of the account.  # noqa: E501

        :param domain: The domain of this AdminAccount.  # noqa: E501
        :type: object
        """
        if domain is None:
            raise ValueError("Invalid value for `domain`, must not be `None`")  # noqa: E501

        self._domain = domain

    @property
    def created_at(self):
        """Gets the created_at of this AdminAccount.  # noqa: E501

        When the account was first discovered  # noqa: E501

        :return: The created_at of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AdminAccount.

        When the account was first discovered  # noqa: E501

        :param created_at: The created_at of this AdminAccount.  # noqa: E501
        :type: object
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def email(self):
        """Gets the email of this AdminAccount.  # noqa: E501

        The email address associated with the account.  # noqa: E501

        :return: The email of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AdminAccount.

        The email address associated with the account.  # noqa: E501

        :param email: The email of this AdminAccount.  # noqa: E501
        :type: object
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def ip(self):
        """Gets the ip of this AdminAccount.  # noqa: E501

        The IP address last used to login to this account.  # noqa: E501

        :return: The ip of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this AdminAccount.

        The IP address last used to login to this account.  # noqa: E501

        :param ip: The ip of this AdminAccount.  # noqa: E501
        :type: object
        """
        if ip is None:
            raise ValueError("Invalid value for `ip`, must not be `None`")  # noqa: E501

        self._ip = ip

    @property
    def locale(self):
        """Gets the locale of this AdminAccount.  # noqa: E501

        The locale of the account. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :return: The locale of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this AdminAccount.

        The locale of the account. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :param locale: The locale of this AdminAccount.  # noqa: E501
        :type: object
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def invite_request(self):
        """Gets the invite_request of this AdminAccount.  # noqa: E501

        Invite request text ???  # noqa: E501

        :return: The invite_request of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._invite_request

    @invite_request.setter
    def invite_request(self, invite_request):
        """Sets the invite_request of this AdminAccount.

        Invite request text ???  # noqa: E501

        :param invite_request: The invite_request of this AdminAccount.  # noqa: E501
        :type: object
        """
        if invite_request is None:
            raise ValueError("Invalid value for `invite_request`, must not be `None`")  # noqa: E501

        self._invite_request = invite_request

    @property
    def role(self):
        """Gets the role of this AdminAccount.  # noqa: E501

        The current role of the account.  # noqa: E501

        :return: The role of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this AdminAccount.

        The current role of the account.  # noqa: E501

        :param role: The role of this AdminAccount.  # noqa: E501
        :type: object
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def confirmed(self):
        """Gets the confirmed of this AdminAccount.  # noqa: E501

        Whether the account has confirmed their email address.  # noqa: E501

        :return: The confirmed of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed):
        """Sets the confirmed of this AdminAccount.

        Whether the account has confirmed their email address.  # noqa: E501

        :param confirmed: The confirmed of this AdminAccount.  # noqa: E501
        :type: object
        """
        if confirmed is None:
            raise ValueError("Invalid value for `confirmed`, must not be `None`")  # noqa: E501

        self._confirmed = confirmed

    @property
    def approved(self):
        """Gets the approved of this AdminAccount.  # noqa: E501

        Whether the account is currently approved.  # noqa: E501

        :return: The approved of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._approved

    @approved.setter
    def approved(self, approved):
        """Sets the approved of this AdminAccount.

        Whether the account is currently approved.  # noqa: E501

        :param approved: The approved of this AdminAccount.  # noqa: E501
        :type: object
        """
        if approved is None:
            raise ValueError("Invalid value for `approved`, must not be `None`")  # noqa: E501

        self._approved = approved

    @property
    def disabled(self):
        """Gets the disabled of this AdminAccount.  # noqa: E501

        Whether the account is currently disabled.  # noqa: E501

        :return: The disabled of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this AdminAccount.

        Whether the account is currently disabled.  # noqa: E501

        :param disabled: The disabled of this AdminAccount.  # noqa: E501
        :type: object
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def silenced(self):
        """Gets the silenced of this AdminAccount.  # noqa: E501

        Whether the account is currently silenced.  # noqa: E501

        :return: The silenced of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._silenced

    @silenced.setter
    def silenced(self, silenced):
        """Sets the silenced of this AdminAccount.

        Whether the account is currently silenced.  # noqa: E501

        :param silenced: The silenced of this AdminAccount.  # noqa: E501
        :type: object
        """
        if silenced is None:
            raise ValueError("Invalid value for `silenced`, must not be `None`")  # noqa: E501

        self._silenced = silenced

    @property
    def suspended(self):
        """Gets the suspended of this AdminAccount.  # noqa: E501

        Whether the account is currently suspended.  # noqa: E501

        :return: The suspended of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended):
        """Sets the suspended of this AdminAccount.

        Whether the account is currently suspended.  # noqa: E501

        :param suspended: The suspended of this AdminAccount.  # noqa: E501
        :type: object
        """
        if suspended is None:
            raise ValueError("Invalid value for `suspended`, must not be `None`")  # noqa: E501

        self._suspended = suspended

    @property
    def account(self):
        """Gets the account of this AdminAccount.  # noqa: E501


        :return: The account of this AdminAccount.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this AdminAccount.


        :param account: The account of this AdminAccount.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def created_by_application_id(self):
        """Gets the created_by_application_id of this AdminAccount.  # noqa: E501

        The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The created_by_application_id of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._created_by_application_id

    @created_by_application_id.setter
    def created_by_application_id(self, created_by_application_id):
        """Sets the created_by_application_id of this AdminAccount.

        The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param created_by_application_id: The created_by_application_id of this AdminAccount.  # noqa: E501
        :type: object
        """

        self._created_by_application_id = created_by_application_id

    @property
    def invited_by_account_id(self):
        """Gets the invited_by_account_id of this AdminAccount.  # noqa: E501

        The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The invited_by_account_id of this AdminAccount.  # noqa: E501
        :rtype: object
        """
        return self._invited_by_account_id

    @invited_by_account_id.setter
    def invited_by_account_id(self, invited_by_account_id):
        """Sets the invited_by_account_id of this AdminAccount.

        The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param invited_by_account_id: The invited_by_account_id of this AdminAccount.  # noqa: E501
        :type: object
        """

        self._invited_by_account_id = invited_by_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdminAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdminAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
