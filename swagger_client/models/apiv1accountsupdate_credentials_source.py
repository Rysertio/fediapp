# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Apiv1accountsupdateCredentialsSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'privacy': 'object',
        'sensitive': 'object',
        'language': 'object'
    }

    attribute_map = {
        'privacy': 'privacy',
        'sensitive': 'sensitive',
        'language': 'language'
    }

    def __init__(self, privacy=None, sensitive=None, language=None):  # noqa: E501
        """Apiv1accountsupdateCredentialsSource - a model defined in Swagger"""  # noqa: E501
        self._privacy = None
        self._sensitive = None
        self._language = None
        self.discriminator = None
        if privacy is not None:
            self.privacy = privacy
        if sensitive is not None:
            self.sensitive = sensitive
        if language is not None:
            self.language = language

    @property
    def privacy(self):
        """Gets the privacy of this Apiv1accountsupdateCredentialsSource.  # noqa: E501

        Default post privacy for authored statuses.  # noqa: E501

        :return: The privacy of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :rtype: object
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this Apiv1accountsupdateCredentialsSource.

        Default post privacy for authored statuses.  # noqa: E501

        :param privacy: The privacy of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :type: object
        """

        self._privacy = privacy

    @property
    def sensitive(self):
        """Gets the sensitive of this Apiv1accountsupdateCredentialsSource.  # noqa: E501

        Whether to mark authored statuses as sensitive by default.  # noqa: E501

        :return: The sensitive of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :rtype: object
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this Apiv1accountsupdateCredentialsSource.

        Whether to mark authored statuses as sensitive by default.  # noqa: E501

        :param sensitive: The sensitive of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :type: object
        """

        self._sensitive = sensitive

    @property
    def language(self):
        """Gets the language of this Apiv1accountsupdateCredentialsSource.  # noqa: E501

        Default language to use for authored statuses (ISO 6391).  # noqa: E501

        :return: The language of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :rtype: object
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Apiv1accountsupdateCredentialsSource.

        Default language to use for authored statuses (ISO 6391).  # noqa: E501

        :param language: The language of this Apiv1accountsupdateCredentialsSource.  # noqa: E501
        :type: object
        """

        self._language = language

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Apiv1accountsupdateCredentialsSource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Apiv1accountsupdateCredentialsSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
