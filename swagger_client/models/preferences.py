# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Preferences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'postingdefaultvisibility': 'object',
        'postingdefaultsensitive': 'object',
        'postingdefaultlanguage': 'object',
        'readingexpandmedia': 'object',
        'readingexpandspoilers': 'object'
    }

    attribute_map = {
        'postingdefaultvisibility': 'posting:default:visibility',
        'postingdefaultsensitive': 'posting:default:sensitive',
        'postingdefaultlanguage': 'posting:default:language',
        'readingexpandmedia': 'reading:expand:media',
        'readingexpandspoilers': 'reading:expand:spoilers'
    }

    def __init__(self, postingdefaultvisibility=None, postingdefaultsensitive=None, postingdefaultlanguage=None, readingexpandmedia=None, readingexpandspoilers=None):  # noqa: E501
        """Preferences - a model defined in Swagger"""  # noqa: E501
        self._postingdefaultvisibility = None
        self._postingdefaultsensitive = None
        self._postingdefaultlanguage = None
        self._readingexpandmedia = None
        self._readingexpandspoilers = None
        self.discriminator = None
        self.postingdefaultvisibility = postingdefaultvisibility
        self.postingdefaultsensitive = postingdefaultsensitive
        if postingdefaultlanguage is not None:
            self.postingdefaultlanguage = postingdefaultlanguage
        self.readingexpandmedia = readingexpandmedia
        self.readingexpandspoilers = readingexpandspoilers

    @property
    def postingdefaultvisibility(self):
        """Gets the postingdefaultvisibility of this Preferences.  # noqa: E501

        Default visibility for new posts. Equivalent to `Source#privacy`.  # noqa: E501

        :return: The postingdefaultvisibility of this Preferences.  # noqa: E501
        :rtype: object
        """
        return self._postingdefaultvisibility

    @postingdefaultvisibility.setter
    def postingdefaultvisibility(self, postingdefaultvisibility):
        """Sets the postingdefaultvisibility of this Preferences.

        Default visibility for new posts. Equivalent to `Source#privacy`.  # noqa: E501

        :param postingdefaultvisibility: The postingdefaultvisibility of this Preferences.  # noqa: E501
        :type: object
        """
        if postingdefaultvisibility is None:
            raise ValueError("Invalid value for `postingdefaultvisibility`, must not be `None`")  # noqa: E501

        self._postingdefaultvisibility = postingdefaultvisibility

    @property
    def postingdefaultsensitive(self):
        """Gets the postingdefaultsensitive of this Preferences.  # noqa: E501

        Default sensitivity flag for new posts. Equivalent to `Source#sensitive`.  # noqa: E501

        :return: The postingdefaultsensitive of this Preferences.  # noqa: E501
        :rtype: object
        """
        return self._postingdefaultsensitive

    @postingdefaultsensitive.setter
    def postingdefaultsensitive(self, postingdefaultsensitive):
        """Sets the postingdefaultsensitive of this Preferences.

        Default sensitivity flag for new posts. Equivalent to `Source#sensitive`.  # noqa: E501

        :param postingdefaultsensitive: The postingdefaultsensitive of this Preferences.  # noqa: E501
        :type: object
        """
        if postingdefaultsensitive is None:
            raise ValueError("Invalid value for `postingdefaultsensitive`, must not be `None`")  # noqa: E501

        self._postingdefaultsensitive = postingdefaultsensitive

    @property
    def postingdefaultlanguage(self):
        """Gets the postingdefaultlanguage of this Preferences.  # noqa: E501

        Default language for new posts. Equivalent to `Source#language`  # noqa: E501

        :return: The postingdefaultlanguage of this Preferences.  # noqa: E501
        :rtype: object
        """
        return self._postingdefaultlanguage

    @postingdefaultlanguage.setter
    def postingdefaultlanguage(self, postingdefaultlanguage):
        """Sets the postingdefaultlanguage of this Preferences.

        Default language for new posts. Equivalent to `Source#language`  # noqa: E501

        :param postingdefaultlanguage: The postingdefaultlanguage of this Preferences.  # noqa: E501
        :type: object
        """

        self._postingdefaultlanguage = postingdefaultlanguage

    @property
    def readingexpandmedia(self):
        """Gets the readingexpandmedia of this Preferences.  # noqa: E501

        Whether media attachments should be automatically displayed or blurred / hidden.  - `default` = Hide media marked as sensitive. - `show_all` = Always show all media by default, regardless of sensitivity. - `hide_all` = Always hide all media by default, redgardless of sensitivity.  # noqa: E501

        :return: The readingexpandmedia of this Preferences.  # noqa: E501
        :rtype: object
        """
        return self._readingexpandmedia

    @readingexpandmedia.setter
    def readingexpandmedia(self, readingexpandmedia):
        """Sets the readingexpandmedia of this Preferences.

        Whether media attachments should be automatically displayed or blurred / hidden.  - `default` = Hide media marked as sensitive. - `show_all` = Always show all media by default, regardless of sensitivity. - `hide_all` = Always hide all media by default, redgardless of sensitivity.  # noqa: E501

        :param readingexpandmedia: The readingexpandmedia of this Preferences.  # noqa: E501
        :type: object
        """
        if readingexpandmedia is None:
            raise ValueError("Invalid value for `readingexpandmedia`, must not be `None`")  # noqa: E501

        self._readingexpandmedia = readingexpandmedia

    @property
    def readingexpandspoilers(self):
        """Gets the readingexpandspoilers of this Preferences.  # noqa: E501

        Whether CWs should be expanded by default.  # noqa: E501

        :return: The readingexpandspoilers of this Preferences.  # noqa: E501
        :rtype: object
        """
        return self._readingexpandspoilers

    @readingexpandspoilers.setter
    def readingexpandspoilers(self, readingexpandspoilers):
        """Sets the readingexpandspoilers of this Preferences.

        Whether CWs should be expanded by default.  # noqa: E501

        :param readingexpandspoilers: The readingexpandspoilers of this Preferences.  # noqa: E501
        :type: object
        """
        if readingexpandspoilers is None:
            raise ValueError("Invalid value for `readingexpandspoilers`, must not be `None`")  # noqa: E501

        self._readingexpandspoilers = readingexpandspoilers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Preferences, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Preferences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
