# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PushSubscriptionAlerts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'follow': 'object',
        'favourite': 'object',
        'reblog': 'object',
        'mention': 'object',
        'poll': 'object'
    }

    attribute_map = {
        'follow': 'follow',
        'favourite': 'favourite',
        'reblog': 'reblog',
        'mention': 'mention',
        'poll': 'poll'
    }

    def __init__(self, follow=None, favourite=None, reblog=None, mention=None, poll=None):  # noqa: E501
        """PushSubscriptionAlerts - a model defined in Swagger"""  # noqa: E501
        self._follow = None
        self._favourite = None
        self._reblog = None
        self._mention = None
        self._poll = None
        self.discriminator = None
        self.follow = follow
        self.favourite = favourite
        self.reblog = reblog
        self.mention = mention
        self.poll = poll

    @property
    def follow(self):
        """Gets the follow of this PushSubscriptionAlerts.  # noqa: E501

        Receive a push notification when someone has followed you?  # noqa: E501

        :return: The follow of this PushSubscriptionAlerts.  # noqa: E501
        :rtype: object
        """
        return self._follow

    @follow.setter
    def follow(self, follow):
        """Sets the follow of this PushSubscriptionAlerts.

        Receive a push notification when someone has followed you?  # noqa: E501

        :param follow: The follow of this PushSubscriptionAlerts.  # noqa: E501
        :type: object
        """
        if follow is None:
            raise ValueError("Invalid value for `follow`, must not be `None`")  # noqa: E501

        self._follow = follow

    @property
    def favourite(self):
        """Gets the favourite of this PushSubscriptionAlerts.  # noqa: E501

        Receive a push notification when a status you created has been favourited by someone else?  # noqa: E501

        :return: The favourite of this PushSubscriptionAlerts.  # noqa: E501
        :rtype: object
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite):
        """Sets the favourite of this PushSubscriptionAlerts.

        Receive a push notification when a status you created has been favourited by someone else?  # noqa: E501

        :param favourite: The favourite of this PushSubscriptionAlerts.  # noqa: E501
        :type: object
        """
        if favourite is None:
            raise ValueError("Invalid value for `favourite`, must not be `None`")  # noqa: E501

        self._favourite = favourite

    @property
    def reblog(self):
        """Gets the reblog of this PushSubscriptionAlerts.  # noqa: E501

        Receive a push notification when someone else has mentioned you in a status?  # noqa: E501

        :return: The reblog of this PushSubscriptionAlerts.  # noqa: E501
        :rtype: object
        """
        return self._reblog

    @reblog.setter
    def reblog(self, reblog):
        """Sets the reblog of this PushSubscriptionAlerts.

        Receive a push notification when someone else has mentioned you in a status?  # noqa: E501

        :param reblog: The reblog of this PushSubscriptionAlerts.  # noqa: E501
        :type: object
        """
        if reblog is None:
            raise ValueError("Invalid value for `reblog`, must not be `None`")  # noqa: E501

        self._reblog = reblog

    @property
    def mention(self):
        """Gets the mention of this PushSubscriptionAlerts.  # noqa: E501

        Receive a push notification when a status you created has been boosted by someone else?  # noqa: E501

        :return: The mention of this PushSubscriptionAlerts.  # noqa: E501
        :rtype: object
        """
        return self._mention

    @mention.setter
    def mention(self, mention):
        """Sets the mention of this PushSubscriptionAlerts.

        Receive a push notification when a status you created has been boosted by someone else?  # noqa: E501

        :param mention: The mention of this PushSubscriptionAlerts.  # noqa: E501
        :type: object
        """
        if mention is None:
            raise ValueError("Invalid value for `mention`, must not be `None`")  # noqa: E501

        self._mention = mention

    @property
    def poll(self):
        """Gets the poll of this PushSubscriptionAlerts.  # noqa: E501

        Receive a push notification when a poll you voted in or created has ended?  # noqa: E501

        :return: The poll of this PushSubscriptionAlerts.  # noqa: E501
        :rtype: object
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this PushSubscriptionAlerts.

        Receive a push notification when a poll you voted in or created has ended?  # noqa: E501

        :param poll: The poll of this PushSubscriptionAlerts.  # noqa: E501
        :type: object
        """
        if poll is None:
            raise ValueError("Invalid value for `poll`, must not be `None`")  # noqa: E501

        self._poll = poll

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PushSubscriptionAlerts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushSubscriptionAlerts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
