# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Announcement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'text': 'object',
        'published': 'object',
        'all_day': 'object',
        'created_at': 'object',
        'updated_at': 'object',
        'read': 'object',
        'reactions': 'object',
        'scheduled_at': 'object',
        'starts_at': 'object',
        'ends_at': 'object'
    }

    attribute_map = {
        'id': 'id',
        'text': 'text',
        'published': 'published',
        'all_day': 'all_day',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'read': 'read',
        'reactions': 'reactions',
        'scheduled_at': 'scheduled_at',
        'starts_at': 'starts_at',
        'ends_at': 'ends_at'
    }

    def __init__(self, id=None, text=None, published=None, all_day=None, created_at=None, updated_at=None, read=None, reactions=None, scheduled_at=None, starts_at=None, ends_at=None):  # noqa: E501
        """Announcement - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._text = None
        self._published = None
        self._all_day = None
        self._created_at = None
        self._updated_at = None
        self._read = None
        self._reactions = None
        self._scheduled_at = None
        self._starts_at = None
        self._ends_at = None
        self.discriminator = None
        self.id = id
        self.text = text
        self.published = published
        self.all_day = all_day
        self.created_at = created_at
        self.updated_at = updated_at
        self.read = read
        self.reactions = reactions
        if scheduled_at is not None:
            self.scheduled_at = scheduled_at
        if starts_at is not None:
            self.starts_at = starts_at
        if ends_at is not None:
            self.ends_at = ends_at

    @property
    def id(self):
        """Gets the id of this Announcement.  # noqa: E501

        The announcement id.  # noqa: E501

        :return: The id of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Announcement.

        The announcement id.  # noqa: E501

        :param id: The id of this Announcement.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def text(self):
        """Gets the text of this Announcement.  # noqa: E501

        The content of the announcement.  # noqa: E501

        :return: The text of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Announcement.

        The content of the announcement.  # noqa: E501

        :param text: The text of this Announcement.  # noqa: E501
        :type: object
        """
        if text is None:
            raise ValueError("Invalid value for `text`, must not be `None`")  # noqa: E501

        self._text = text

    @property
    def published(self):
        """Gets the published of this Announcement.  # noqa: E501

        Whether the announcement is currently active.  # noqa: E501

        :return: The published of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Announcement.

        Whether the announcement is currently active.  # noqa: E501

        :param published: The published of this Announcement.  # noqa: E501
        :type: object
        """
        if published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    @property
    def all_day(self):
        """Gets the all_day of this Announcement.  # noqa: E501

        Whether the announcement has a start/end time.  # noqa: E501

        :return: The all_day of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this Announcement.

        Whether the announcement has a start/end time.  # noqa: E501

        :param all_day: The all_day of this Announcement.  # noqa: E501
        :type: object
        """
        if all_day is None:
            raise ValueError("Invalid value for `all_day`, must not be `None`")  # noqa: E501

        self._all_day = all_day

    @property
    def created_at(self):
        """Gets the created_at of this Announcement.  # noqa: E501

        When the announcement was created.  # noqa: E501

        :return: The created_at of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Announcement.

        When the announcement was created.  # noqa: E501

        :param created_at: The created_at of this Announcement.  # noqa: E501
        :type: object
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Announcement.  # noqa: E501

        When the announcement was updated.  # noqa: E501

        :return: The updated_at of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Announcement.

        When the announcement was updated.  # noqa: E501

        :param updated_at: The updated_at of this Announcement.  # noqa: E501
        :type: object
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def read(self):
        """Gets the read of this Announcement.  # noqa: E501

        Whether the announcement has been read by the user.  # noqa: E501

        :return: The read of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this Announcement.

        Whether the announcement has been read by the user.  # noqa: E501

        :param read: The read of this Announcement.  # noqa: E501
        :type: object
        """
        if read is None:
            raise ValueError("Invalid value for `read`, must not be `None`")  # noqa: E501

        self._read = read

    @property
    def reactions(self):
        """Gets the reactions of this Announcement.  # noqa: E501

        Emoji reactions attached to the announcement.  # noqa: E501

        :return: The reactions of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._reactions

    @reactions.setter
    def reactions(self, reactions):
        """Sets the reactions of this Announcement.

        Emoji reactions attached to the announcement.  # noqa: E501

        :param reactions: The reactions of this Announcement.  # noqa: E501
        :type: object
        """
        if reactions is None:
            raise ValueError("Invalid value for `reactions`, must not be `None`")  # noqa: E501

        self._reactions = reactions

    @property
    def scheduled_at(self):
        """Gets the scheduled_at of this Announcement.  # noqa: E501

        When the future annouoncement was scheduled.  # noqa: E501

        :return: The scheduled_at of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at):
        """Sets the scheduled_at of this Announcement.

        When the future annouoncement was scheduled.  # noqa: E501

        :param scheduled_at: The scheduled_at of this Announcement.  # noqa: E501
        :type: object
        """

        self._scheduled_at = scheduled_at

    @property
    def starts_at(self):
        """Gets the starts_at of this Announcement.  # noqa: E501

        When the future announcement will start.  # noqa: E501

        :return: The starts_at of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._starts_at

    @starts_at.setter
    def starts_at(self, starts_at):
        """Sets the starts_at of this Announcement.

        When the future announcement will start.  # noqa: E501

        :param starts_at: The starts_at of this Announcement.  # noqa: E501
        :type: object
        """

        self._starts_at = starts_at

    @property
    def ends_at(self):
        """Gets the ends_at of this Announcement.  # noqa: E501

        When the future announcement will end.  # noqa: E501

        :return: The ends_at of this Announcement.  # noqa: E501
        :rtype: object
        """
        return self._ends_at

    @ends_at.setter
    def ends_at(self, ends_at):
        """Sets the ends_at of this Announcement.

        When the future announcement will end.  # noqa: E501

        :param ends_at: The ends_at of this Announcement.  # noqa: E501
        :type: object
        """

        self._ends_at = ends_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Announcement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Announcement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
