# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Card(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'object',
        'title': 'object',
        'description': 'object',
        'type': 'object',
        'author_name': 'object',
        'author_url': 'object',
        'provider_name': 'object',
        'provider_url': 'object',
        'html': 'object',
        'width': 'object',
        'height': 'object',
        'image': 'object',
        'embed_url': 'object',
        'blurhash': 'object'
    }

    attribute_map = {
        'url': 'url',
        'title': 'title',
        'description': 'description',
        'type': 'type',
        'author_name': 'author_name',
        'author_url': 'author_url',
        'provider_name': 'provider_name',
        'provider_url': 'provider_url',
        'html': 'html',
        'width': 'width',
        'height': 'height',
        'image': 'image',
        'embed_url': 'embed_url',
        'blurhash': 'blurhash'
    }

    def __init__(self, url=None, title=None, description=None, type=None, author_name=None, author_url=None, provider_name=None, provider_url=None, html=None, width=None, height=None, image=None, embed_url=None, blurhash=None):  # noqa: E501
        """Card - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._title = None
        self._description = None
        self._type = None
        self._author_name = None
        self._author_url = None
        self._provider_name = None
        self._provider_url = None
        self._html = None
        self._width = None
        self._height = None
        self._image = None
        self._embed_url = None
        self._blurhash = None
        self.discriminator = None
        self.url = url
        self.title = title
        self.description = description
        self.type = type
        if author_name is not None:
            self.author_name = author_name
        if author_url is not None:
            self.author_url = author_url
        if provider_name is not None:
            self.provider_name = provider_name
        if provider_url is not None:
            self.provider_url = provider_url
        if html is not None:
            self.html = html
        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if image is not None:
            self.image = image
        if embed_url is not None:
            self.embed_url = embed_url
        if blurhash is not None:
            self.blurhash = blurhash

    @property
    def url(self):
        """Gets the url of this Card.  # noqa: E501

        Location of linked resource.  # noqa: E501

        :return: The url of this Card.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Card.

        Location of linked resource.  # noqa: E501

        :param url: The url of this Card.  # noqa: E501
        :type: object
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def title(self):
        """Gets the title of this Card.  # noqa: E501

        Title of linked resource.  # noqa: E501

        :return: The title of this Card.  # noqa: E501
        :rtype: object
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Card.

        Title of linked resource.  # noqa: E501

        :param title: The title of this Card.  # noqa: E501
        :type: object
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Card.  # noqa: E501

        Description of preview.  # noqa: E501

        :return: The description of this Card.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Card.

        Description of preview.  # noqa: E501

        :param description: The description of this Card.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def type(self):
        """Gets the type of this Card.  # noqa: E501

        The type of preview card. - `link` = Link OEmbed - `photo` = Photo OEmbed - `video` = Video OEmbed - `rich` = iFrame OEmbed. Not currently accepted, so won't show up in practice.  # noqa: E501

        :return: The type of this Card.  # noqa: E501
        :rtype: object
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Card.

        The type of preview card. - `link` = Link OEmbed - `photo` = Photo OEmbed - `video` = Video OEmbed - `rich` = iFrame OEmbed. Not currently accepted, so won't show up in practice.  # noqa: E501

        :param type: The type of this Card.  # noqa: E501
        :type: object
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def author_name(self):
        """Gets the author_name of this Card.  # noqa: E501

        The author of the original resource.  # noqa: E501

        :return: The author_name of this Card.  # noqa: E501
        :rtype: object
        """
        return self._author_name

    @author_name.setter
    def author_name(self, author_name):
        """Sets the author_name of this Card.

        The author of the original resource.  # noqa: E501

        :param author_name: The author_name of this Card.  # noqa: E501
        :type: object
        """

        self._author_name = author_name

    @property
    def author_url(self):
        """Gets the author_url of this Card.  # noqa: E501

        A link to the author of the original resource.  # noqa: E501

        :return: The author_url of this Card.  # noqa: E501
        :rtype: object
        """
        return self._author_url

    @author_url.setter
    def author_url(self, author_url):
        """Sets the author_url of this Card.

        A link to the author of the original resource.  # noqa: E501

        :param author_url: The author_url of this Card.  # noqa: E501
        :type: object
        """

        self._author_url = author_url

    @property
    def provider_name(self):
        """Gets the provider_name of this Card.  # noqa: E501

        The provider of the original resource.  # noqa: E501

        :return: The provider_name of this Card.  # noqa: E501
        :rtype: object
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this Card.

        The provider of the original resource.  # noqa: E501

        :param provider_name: The provider_name of this Card.  # noqa: E501
        :type: object
        """

        self._provider_name = provider_name

    @property
    def provider_url(self):
        """Gets the provider_url of this Card.  # noqa: E501

        A link to the provider of the original resource.  # noqa: E501

        :return: The provider_url of this Card.  # noqa: E501
        :rtype: object
        """
        return self._provider_url

    @provider_url.setter
    def provider_url(self, provider_url):
        """Sets the provider_url of this Card.

        A link to the provider of the original resource.  # noqa: E501

        :param provider_url: The provider_url of this Card.  # noqa: E501
        :type: object
        """

        self._provider_url = provider_url

    @property
    def html(self):
        """Gets the html of this Card.  # noqa: E501

        HTML to be used for generating the preview card.  # noqa: E501

        :return: The html of this Card.  # noqa: E501
        :rtype: object
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Card.

        HTML to be used for generating the preview card.  # noqa: E501

        :param html: The html of this Card.  # noqa: E501
        :type: object
        """

        self._html = html

    @property
    def width(self):
        """Gets the width of this Card.  # noqa: E501

        Width of preview, in pixels.  # noqa: E501

        :return: The width of this Card.  # noqa: E501
        :rtype: object
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Card.

        Width of preview, in pixels.  # noqa: E501

        :param width: The width of this Card.  # noqa: E501
        :type: object
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this Card.  # noqa: E501

        Height of preview, in pixels.  # noqa: E501

        :return: The height of this Card.  # noqa: E501
        :rtype: object
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Card.

        Height of preview, in pixels.  # noqa: E501

        :param height: The height of this Card.  # noqa: E501
        :type: object
        """

        self._height = height

    @property
    def image(self):
        """Gets the image of this Card.  # noqa: E501

        Preview thumbnail.  # noqa: E501

        :return: The image of this Card.  # noqa: E501
        :rtype: object
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Card.

        Preview thumbnail.  # noqa: E501

        :param image: The image of this Card.  # noqa: E501
        :type: object
        """

        self._image = image

    @property
    def embed_url(self):
        """Gets the embed_url of this Card.  # noqa: E501

        Used for photo embeds, instead of custom `html`.  # noqa: E501

        :return: The embed_url of this Card.  # noqa: E501
        :rtype: object
        """
        return self._embed_url

    @embed_url.setter
    def embed_url(self, embed_url):
        """Sets the embed_url of this Card.

        Used for photo embeds, instead of custom `html`.  # noqa: E501

        :param embed_url: The embed_url of this Card.  # noqa: E501
        :type: object
        """

        self._embed_url = embed_url

    @property
    def blurhash(self):
        """Gets the blurhash of this Card.  # noqa: E501

        A hash compute by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :return: The blurhash of this Card.  # noqa: E501
        :rtype: object
        """
        return self._blurhash

    @blurhash.setter
    def blurhash(self, blurhash):
        """Sets the blurhash of this Card.

        A hash compute by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :param blurhash: The blurhash of this Card.  # noqa: E501
        :type: object
        """

        self._blurhash = blurhash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Card, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Card):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
