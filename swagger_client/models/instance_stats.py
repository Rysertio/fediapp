# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InstanceStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_count': 'object',
        'status_count': 'object',
        'domain_count': 'object'
    }

    attribute_map = {
        'user_count': 'user_count',
        'status_count': 'status_count',
        'domain_count': 'domain_count'
    }

    def __init__(self, user_count=None, status_count=None, domain_count=None):  # noqa: E501
        """InstanceStats - a model defined in Swagger"""  # noqa: E501
        self._user_count = None
        self._status_count = None
        self._domain_count = None
        self.discriminator = None
        self.user_count = user_count
        self.status_count = status_count
        self.domain_count = domain_count

    @property
    def user_count(self):
        """Gets the user_count of this InstanceStats.  # noqa: E501

        Users registered on this instance.  # noqa: E501

        :return: The user_count of this InstanceStats.  # noqa: E501
        :rtype: object
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this InstanceStats.

        Users registered on this instance.  # noqa: E501

        :param user_count: The user_count of this InstanceStats.  # noqa: E501
        :type: object
        """
        if user_count is None:
            raise ValueError("Invalid value for `user_count`, must not be `None`")  # noqa: E501

        self._user_count = user_count

    @property
    def status_count(self):
        """Gets the status_count of this InstanceStats.  # noqa: E501

        Statuses authored by users on instance.  # noqa: E501

        :return: The status_count of this InstanceStats.  # noqa: E501
        :rtype: object
        """
        return self._status_count

    @status_count.setter
    def status_count(self, status_count):
        """Sets the status_count of this InstanceStats.

        Statuses authored by users on instance.  # noqa: E501

        :param status_count: The status_count of this InstanceStats.  # noqa: E501
        :type: object
        """
        if status_count is None:
            raise ValueError("Invalid value for `status_count`, must not be `None`")  # noqa: E501

        self._status_count = status_count

    @property
    def domain_count(self):
        """Gets the domain_count of this InstanceStats.  # noqa: E501

        Domains federated with this instance.  # noqa: E501

        :return: The domain_count of this InstanceStats.  # noqa: E501
        :rtype: object
        """
        return self._domain_count

    @domain_count.setter
    def domain_count(self, domain_count):
        """Sets the domain_count of this InstanceStats.

        Domains federated with this instance.  # noqa: E501

        :param domain_count: The domain_count of this InstanceStats.  # noqa: E501
        :type: object
        """
        if domain_count is None:
            raise ValueError("Invalid value for `domain_count`, must not be `None`")  # noqa: E501

        self._domain_count = domain_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InstanceStats, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InstanceStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
