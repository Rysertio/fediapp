# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdFollowersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_id': 'object',
        'since_id': 'object',
        'limit': 'object'
    }

    attribute_map = {
        'max_id': 'max_id',
        'since_id': 'since_id',
        'limit': 'limit'
    }

    def __init__(self, max_id=None, since_id=None, limit=None):  # noqa: E501
        """IdFollowersBody - a model defined in Swagger"""  # noqa: E501
        self._max_id = None
        self._since_id = None
        self._limit = None
        self.discriminator = None
        if max_id is not None:
            self.max_id = max_id
        if since_id is not None:
            self.since_id = since_id
        if limit is not None:
            self.limit = limit

    @property
    def max_id(self):
        """Gets the max_id of this IdFollowersBody.  # noqa: E501

        **Internal parameter**. Use HTTP `Link` header for pagination.  # noqa: E501

        :return: The max_id of this IdFollowersBody.  # noqa: E501
        :rtype: object
        """
        return self._max_id

    @max_id.setter
    def max_id(self, max_id):
        """Sets the max_id of this IdFollowersBody.

        **Internal parameter**. Use HTTP `Link` header for pagination.  # noqa: E501

        :param max_id: The max_id of this IdFollowersBody.  # noqa: E501
        :type: object
        """

        self._max_id = max_id

    @property
    def since_id(self):
        """Gets the since_id of this IdFollowersBody.  # noqa: E501

        **Internal parameter**. Use HTTP `Link` header for pagination.  # noqa: E501

        :return: The since_id of this IdFollowersBody.  # noqa: E501
        :rtype: object
        """
        return self._since_id

    @since_id.setter
    def since_id(self, since_id):
        """Sets the since_id of this IdFollowersBody.

        **Internal parameter**. Use HTTP `Link` header for pagination.  # noqa: E501

        :param since_id: The since_id of this IdFollowersBody.  # noqa: E501
        :type: object
        """

        self._since_id = since_id

    @property
    def limit(self):
        """Gets the limit of this IdFollowersBody.  # noqa: E501

        Maximum number of results to return.  # noqa: E501

        :return: The limit of this IdFollowersBody.  # noqa: E501
        :rtype: object
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this IdFollowersBody.

        Maximum number of results to return.  # noqa: E501

        :param limit: The limit of this IdFollowersBody.  # noqa: E501
        :type: object
        """

        self._limit = limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdFollowersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdFollowersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
