# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Instance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'uri': 'object',
        'title': 'object',
        'short_description': 'object',
        'description': 'object',
        'email': 'object',
        'version': 'object',
        'urls': 'InstanceUrls',
        'stats': 'InstanceStats',
        'languages': 'object',
        'registrations': 'object',
        'approval_required': 'object',
        'contact_account': 'Account',
        'thumbnail': 'object'
    }

    attribute_map = {
        'uri': 'uri',
        'title': 'title',
        'short_description': 'short_description',
        'description': 'description',
        'email': 'email',
        'version': 'version',
        'urls': 'urls',
        'stats': 'stats',
        'languages': 'languages',
        'registrations': 'registrations',
        'approval_required': 'approval_required',
        'contact_account': 'contact_account',
        'thumbnail': 'thumbnail'
    }

    def __init__(self, uri=None, title=None, short_description=None, description=None, email=None, version=None, urls=None, stats=None, languages=None, registrations=None, approval_required=None, contact_account=None, thumbnail=None):  # noqa: E501
        """Instance - a model defined in Swagger"""  # noqa: E501
        self._uri = None
        self._title = None
        self._short_description = None
        self._description = None
        self._email = None
        self._version = None
        self._urls = None
        self._stats = None
        self._languages = None
        self._registrations = None
        self._approval_required = None
        self._contact_account = None
        self._thumbnail = None
        self.discriminator = None
        self.uri = uri
        self.title = title
        self.short_description = short_description
        self.description = description
        self.email = email
        self.version = version
        self.urls = urls
        self.stats = stats
        self.languages = languages
        self.registrations = registrations
        self.approval_required = approval_required
        if contact_account is not None:
            self.contact_account = contact_account
        if thumbnail is not None:
            self.thumbnail = thumbnail

    @property
    def uri(self):
        """Gets the uri of this Instance.  # noqa: E501

        The domain name of the instance.  # noqa: E501

        :return: The uri of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Instance.

        The domain name of the instance.  # noqa: E501

        :param uri: The uri of this Instance.  # noqa: E501
        :type: object
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def title(self):
        """Gets the title of this Instance.  # noqa: E501

        The title of the website.  # noqa: E501

        :return: The title of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Instance.

        The title of the website.  # noqa: E501

        :param title: The title of this Instance.  # noqa: E501
        :type: object
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def short_description(self):
        """Gets the short_description of this Instance.  # noqa: E501

        A shorter description defined by the admin.  # noqa: E501

        :return: The short_description of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Instance.

        A shorter description defined by the admin.  # noqa: E501

        :param short_description: The short_description of this Instance.  # noqa: E501
        :type: object
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501

        self._short_description = short_description

    @property
    def description(self):
        """Gets the description of this Instance.  # noqa: E501

        Admin-defined description of the Mastodon site.  # noqa: E501

        :return: The description of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Instance.

        Admin-defined description of the Mastodon site.  # noqa: E501

        :param description: The description of this Instance.  # noqa: E501
        :type: object
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def email(self):
        """Gets the email of this Instance.  # noqa: E501

        An email that may be contacted for any inquiries.  # noqa: E501

        :return: The email of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Instance.

        An email that may be contacted for any inquiries.  # noqa: E501

        :param email: The email of this Instance.  # noqa: E501
        :type: object
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def version(self):
        """Gets the version of this Instance.  # noqa: E501

        The version of Mastodon installed on the instance.  # noqa: E501

        :return: The version of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Instance.

        The version of Mastodon installed on the instance.  # noqa: E501

        :param version: The version of this Instance.  # noqa: E501
        :type: object
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version

    @property
    def urls(self):
        """Gets the urls of this Instance.  # noqa: E501


        :return: The urls of this Instance.  # noqa: E501
        :rtype: InstanceUrls
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this Instance.


        :param urls: The urls of this Instance.  # noqa: E501
        :type: InstanceUrls
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")  # noqa: E501

        self._urls = urls

    @property
    def stats(self):
        """Gets the stats of this Instance.  # noqa: E501


        :return: The stats of this Instance.  # noqa: E501
        :rtype: InstanceStats
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this Instance.


        :param stats: The stats of this Instance.  # noqa: E501
        :type: InstanceStats
        """
        if stats is None:
            raise ValueError("Invalid value for `stats`, must not be `None`")  # noqa: E501

        self._stats = stats

    @property
    def languages(self):
        """Gets the languages of this Instance.  # noqa: E501

        Primary languages of the website and its staff.  # noqa: E501

        :return: The languages of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._languages

    @languages.setter
    def languages(self, languages):
        """Sets the languages of this Instance.

        Primary languages of the website and its staff.  # noqa: E501

        :param languages: The languages of this Instance.  # noqa: E501
        :type: object
        """
        if languages is None:
            raise ValueError("Invalid value for `languages`, must not be `None`")  # noqa: E501

        self._languages = languages

    @property
    def registrations(self):
        """Gets the registrations of this Instance.  # noqa: E501

        Whether registrations are enabled.  # noqa: E501

        :return: The registrations of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._registrations

    @registrations.setter
    def registrations(self, registrations):
        """Sets the registrations of this Instance.

        Whether registrations are enabled.  # noqa: E501

        :param registrations: The registrations of this Instance.  # noqa: E501
        :type: object
        """
        if registrations is None:
            raise ValueError("Invalid value for `registrations`, must not be `None`")  # noqa: E501

        self._registrations = registrations

    @property
    def approval_required(self):
        """Gets the approval_required of this Instance.  # noqa: E501

        Whether registrations require moderator approval.  # noqa: E501

        :return: The approval_required of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._approval_required

    @approval_required.setter
    def approval_required(self, approval_required):
        """Sets the approval_required of this Instance.

        Whether registrations require moderator approval.  # noqa: E501

        :param approval_required: The approval_required of this Instance.  # noqa: E501
        :type: object
        """
        if approval_required is None:
            raise ValueError("Invalid value for `approval_required`, must not be `None`")  # noqa: E501

        self._approval_required = approval_required

    @property
    def contact_account(self):
        """Gets the contact_account of this Instance.  # noqa: E501


        :return: The contact_account of this Instance.  # noqa: E501
        :rtype: Account
        """
        return self._contact_account

    @contact_account.setter
    def contact_account(self, contact_account):
        """Sets the contact_account of this Instance.


        :param contact_account: The contact_account of this Instance.  # noqa: E501
        :type: Account
        """

        self._contact_account = contact_account

    @property
    def thumbnail(self):
        """Gets the thumbnail of this Instance.  # noqa: E501

        Banner image for the website.  # noqa: E501

        :return: The thumbnail of this Instance.  # noqa: E501
        :rtype: object
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this Instance.

        Banner image for the website.  # noqa: E501

        :param thumbnail: The thumbnail of this Instance.  # noqa: E501
        :type: object
        """

        self._thumbnail = thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Instance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Instance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
