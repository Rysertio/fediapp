# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Attachment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'url': 'object',
        'preview_url': 'object',
        'remote_url': 'object',
        'description': 'object',
        'blurhash': 'object'
    }

    attribute_map = {
        'id': 'id',
        'url': 'url',
        'preview_url': 'preview_url',
        'remote_url': 'remote_url',
        'description': 'description',
        'blurhash': 'blurhash'
    }

    def __init__(self, id=None, url=None, preview_url=None, remote_url=None, description=None, blurhash=None):  # noqa: E501
        """Attachment - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._url = None
        self._preview_url = None
        self._remote_url = None
        self._description = None
        self._blurhash = None
        self.discriminator = None
        self.id = id
        self.url = url
        self.preview_url = preview_url
        if remote_url is not None:
            self.remote_url = remote_url
        if description is not None:
            self.description = description
        if blurhash is not None:
            self.blurhash = blurhash

    @property
    def id(self):
        """Gets the id of this Attachment.  # noqa: E501

        The ID of the attachment in the database. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        The ID of the attachment in the database. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Attachment.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self):
        """Gets the url of this Attachment.  # noqa: E501

        The location of the original full-size attachment.  # noqa: E501

        :return: The url of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Attachment.

        The location of the original full-size attachment.  # noqa: E501

        :param url: The url of this Attachment.  # noqa: E501
        :type: object
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def preview_url(self):
        """Gets the preview_url of this Attachment.  # noqa: E501

        The location of a scaled-down preview of the attachment.  # noqa: E501

        :return: The preview_url of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url):
        """Sets the preview_url of this Attachment.

        The location of a scaled-down preview of the attachment.  # noqa: E501

        :param preview_url: The preview_url of this Attachment.  # noqa: E501
        :type: object
        """
        if preview_url is None:
            raise ValueError("Invalid value for `preview_url`, must not be `None`")  # noqa: E501

        self._preview_url = preview_url

    @property
    def remote_url(self):
        """Gets the remote_url of this Attachment.  # noqa: E501

        The location of the full-size original attachment on the remote website. Null if the attachment is local.  # noqa: E501

        :return: The remote_url of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._remote_url

    @remote_url.setter
    def remote_url(self, remote_url):
        """Sets the remote_url of this Attachment.

        The location of the full-size original attachment on the remote website. Null if the attachment is local.  # noqa: E501

        :param remote_url: The remote_url of this Attachment.  # noqa: E501
        :type: object
        """

        self._remote_url = remote_url

    @property
    def description(self):
        """Gets the description of this Attachment.  # noqa: E501

        Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.  # noqa: E501

        :return: The description of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.

        Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.  # noqa: E501

        :param description: The description of this Attachment.  # noqa: E501
        :type: object
        """

        self._description = description

    @property
    def blurhash(self):
        """Gets the blurhash of this Attachment.  # noqa: E501

        A hash computed by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :return: The blurhash of this Attachment.  # noqa: E501
        :rtype: object
        """
        return self._blurhash

    @blurhash.setter
    def blurhash(self, blurhash):
        """Sets the blurhash of this Attachment.

        A hash computed by the BlurHash algorithm, for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :param blurhash: The blurhash of this Attachment.  # noqa: E501
        :type: object
        """

        self._blurhash = blurhash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Attachment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Attachment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
