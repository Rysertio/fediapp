# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Relationship(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'following': 'object',
        'requested': 'object',
        'followed_by': 'object',
        'muting': 'object',
        'muting_notifications': 'object',
        'showing_reblogs': 'object',
        'notifying': 'object',
        'blocking': 'object',
        'domain_blocking': 'object',
        'blocked_by': 'object',
        'note': 'object'
    }

    attribute_map = {
        'id': 'id',
        'following': 'following',
        'requested': 'requested',
        'followed_by': 'followed_by',
        'muting': 'muting',
        'muting_notifications': 'muting_notifications',
        'showing_reblogs': 'showing_reblogs',
        'notifying': 'notifying',
        'blocking': 'blocking',
        'domain_blocking': 'domain_blocking',
        'blocked_by': 'blocked_by',
        'note': 'note'
    }

    def __init__(self, id=None, following=None, requested=None, followed_by=None, muting=None, muting_notifications=None, showing_reblogs=None, notifying=None, blocking=None, domain_blocking=None, blocked_by=None, note=None):  # noqa: E501
        """Relationship - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._following = None
        self._requested = None
        self._followed_by = None
        self._muting = None
        self._muting_notifications = None
        self._showing_reblogs = None
        self._notifying = None
        self._blocking = None
        self._domain_blocking = None
        self._blocked_by = None
        self._note = None
        self.discriminator = None
        self.id = id
        self.following = following
        self.requested = requested
        self.followed_by = followed_by
        self.muting = muting
        self.muting_notifications = muting_notifications
        self.showing_reblogs = showing_reblogs
        self.notifying = notifying
        self.blocking = blocking
        self.domain_blocking = domain_blocking
        self.blocked_by = blocked_by
        if note is not None:
            self.note = note

    @property
    def id(self):
        """Gets the id of this Relationship.  # noqa: E501

        The account id. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Relationship.

        The account id. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Relationship.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def following(self):
        """Gets the following of this Relationship.  # noqa: E501

        Are you following this user?  # noqa: E501

        :return: The following of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._following

    @following.setter
    def following(self, following):
        """Sets the following of this Relationship.

        Are you following this user?  # noqa: E501

        :param following: The following of this Relationship.  # noqa: E501
        :type: object
        """
        if following is None:
            raise ValueError("Invalid value for `following`, must not be `None`")  # noqa: E501

        self._following = following

    @property
    def requested(self):
        """Gets the requested of this Relationship.  # noqa: E501

        Do you have a pending follow request for this user?  # noqa: E501

        :return: The requested of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._requested

    @requested.setter
    def requested(self, requested):
        """Sets the requested of this Relationship.

        Do you have a pending follow request for this user?  # noqa: E501

        :param requested: The requested of this Relationship.  # noqa: E501
        :type: object
        """
        if requested is None:
            raise ValueError("Invalid value for `requested`, must not be `None`")  # noqa: E501

        self._requested = requested

    @property
    def followed_by(self):
        """Gets the followed_by of this Relationship.  # noqa: E501

        Are you followed by this user?  # noqa: E501

        :return: The followed_by of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._followed_by

    @followed_by.setter
    def followed_by(self, followed_by):
        """Sets the followed_by of this Relationship.

        Are you followed by this user?  # noqa: E501

        :param followed_by: The followed_by of this Relationship.  # noqa: E501
        :type: object
        """
        if followed_by is None:
            raise ValueError("Invalid value for `followed_by`, must not be `None`")  # noqa: E501

        self._followed_by = followed_by

    @property
    def muting(self):
        """Gets the muting of this Relationship.  # noqa: E501

        Are you muting this user?  # noqa: E501

        :return: The muting of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._muting

    @muting.setter
    def muting(self, muting):
        """Sets the muting of this Relationship.

        Are you muting this user?  # noqa: E501

        :param muting: The muting of this Relationship.  # noqa: E501
        :type: object
        """
        if muting is None:
            raise ValueError("Invalid value for `muting`, must not be `None`")  # noqa: E501

        self._muting = muting

    @property
    def muting_notifications(self):
        """Gets the muting_notifications of this Relationship.  # noqa: E501

        Are you muting notifications from this user?  # noqa: E501

        :return: The muting_notifications of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._muting_notifications

    @muting_notifications.setter
    def muting_notifications(self, muting_notifications):
        """Sets the muting_notifications of this Relationship.

        Are you muting notifications from this user?  # noqa: E501

        :param muting_notifications: The muting_notifications of this Relationship.  # noqa: E501
        :type: object
        """
        if muting_notifications is None:
            raise ValueError("Invalid value for `muting_notifications`, must not be `None`")  # noqa: E501

        self._muting_notifications = muting_notifications

    @property
    def showing_reblogs(self):
        """Gets the showing_reblogs of this Relationship.  # noqa: E501

        Are you receiving this user's boosts in your home timeline?  # noqa: E501

        :return: The showing_reblogs of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._showing_reblogs

    @showing_reblogs.setter
    def showing_reblogs(self, showing_reblogs):
        """Sets the showing_reblogs of this Relationship.

        Are you receiving this user's boosts in your home timeline?  # noqa: E501

        :param showing_reblogs: The showing_reblogs of this Relationship.  # noqa: E501
        :type: object
        """
        if showing_reblogs is None:
            raise ValueError("Invalid value for `showing_reblogs`, must not be `None`")  # noqa: E501

        self._showing_reblogs = showing_reblogs

    @property
    def notifying(self):
        """Gets the notifying of this Relationship.  # noqa: E501

        Have you enabled notifications for this user?  # noqa: E501

        :return: The notifying of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._notifying

    @notifying.setter
    def notifying(self, notifying):
        """Sets the notifying of this Relationship.

        Have you enabled notifications for this user?  # noqa: E501

        :param notifying: The notifying of this Relationship.  # noqa: E501
        :type: object
        """
        if notifying is None:
            raise ValueError("Invalid value for `notifying`, must not be `None`")  # noqa: E501

        self._notifying = notifying

    @property
    def blocking(self):
        """Gets the blocking of this Relationship.  # noqa: E501

        Are you blocking this user?  # noqa: E501

        :return: The blocking of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._blocking

    @blocking.setter
    def blocking(self, blocking):
        """Sets the blocking of this Relationship.

        Are you blocking this user?  # noqa: E501

        :param blocking: The blocking of this Relationship.  # noqa: E501
        :type: object
        """
        if blocking is None:
            raise ValueError("Invalid value for `blocking`, must not be `None`")  # noqa: E501

        self._blocking = blocking

    @property
    def domain_blocking(self):
        """Gets the domain_blocking of this Relationship.  # noqa: E501

        Are you blocking this user's domain?  # noqa: E501

        :return: The domain_blocking of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._domain_blocking

    @domain_blocking.setter
    def domain_blocking(self, domain_blocking):
        """Sets the domain_blocking of this Relationship.

        Are you blocking this user's domain?  # noqa: E501

        :param domain_blocking: The domain_blocking of this Relationship.  # noqa: E501
        :type: object
        """
        if domain_blocking is None:
            raise ValueError("Invalid value for `domain_blocking`, must not be `None`")  # noqa: E501

        self._domain_blocking = domain_blocking

    @property
    def blocked_by(self):
        """Gets the blocked_by of this Relationship.  # noqa: E501

        Is this user blocking you?  # noqa: E501

        :return: The blocked_by of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._blocked_by

    @blocked_by.setter
    def blocked_by(self, blocked_by):
        """Sets the blocked_by of this Relationship.

        Is this user blocking you?  # noqa: E501

        :param blocked_by: The blocked_by of this Relationship.  # noqa: E501
        :type: object
        """
        if blocked_by is None:
            raise ValueError("Invalid value for `blocked_by`, must not be `None`")  # noqa: E501

        self._blocked_by = blocked_by

    @property
    def note(self):
        """Gets the note of this Relationship.  # noqa: E501

        This user's profile bio  # noqa: E501

        :return: The note of this Relationship.  # noqa: E501
        :rtype: object
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Relationship.

        This user's profile bio  # noqa: E501

        :param note: The note of this Relationship.  # noqa: E501
        :type: object
        """

        self._note = note

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Relationship, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Relationship):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
