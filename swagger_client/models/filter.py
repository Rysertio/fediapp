# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Filter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'phrase': 'object',
        'context': 'object',
        'expires_at': 'object',
        'irreversible': 'object',
        'whole_word': 'object'
    }

    attribute_map = {
        'id': 'id',
        'phrase': 'phrase',
        'context': 'context',
        'expires_at': 'expires_at',
        'irreversible': 'irreversible',
        'whole_word': 'whole_word'
    }

    def __init__(self, id=None, phrase=None, context=None, expires_at=None, irreversible=None, whole_word=None):  # noqa: E501
        """Filter - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._phrase = None
        self._context = None
        self._expires_at = None
        self._irreversible = None
        self._whole_word = None
        self.discriminator = None
        self.id = id
        self.phrase = phrase
        self.context = context
        self.expires_at = expires_at
        self.irreversible = irreversible
        self.whole_word = whole_word

    @property
    def id(self):
        """Gets the id of this Filter.  # noqa: E501

        The ID of the filter in the database.  # noqa: E501

        :return: The id of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Filter.

        The ID of the filter in the database.  # noqa: E501

        :param id: The id of this Filter.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def phrase(self):
        """Gets the phrase of this Filter.  # noqa: E501

        The text to be filtered.  # noqa: E501

        :return: The phrase of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._phrase

    @phrase.setter
    def phrase(self, phrase):
        """Sets the phrase of this Filter.

        The text to be filtered.  # noqa: E501

        :param phrase: The phrase of this Filter.  # noqa: E501
        :type: object
        """
        if phrase is None:
            raise ValueError("Invalid value for `phrase`, must not be `None`")  # noqa: E501

        self._phrase = phrase

    @property
    def context(self):
        """Gets the context of this Filter.  # noqa: E501

        The contexts in which the filter should be applied.  - `home` = home timeline and lists. - `notifications` = notifications timeline - `public` = public timelines - `thread` = expanded thread of a detailed status.  # noqa: E501

        :return: The context of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Filter.

        The contexts in which the filter should be applied.  - `home` = home timeline and lists. - `notifications` = notifications timeline - `public` = public timelines - `thread` = expanded thread of a detailed status.  # noqa: E501

        :param context: The context of this Filter.  # noqa: E501
        :type: object
        """
        if context is None:
            raise ValueError("Invalid value for `context`, must not be `None`")  # noqa: E501

        self._context = context

    @property
    def expires_at(self):
        """Gets the expires_at of this Filter.  # noqa: E501

        When the filter should no longer be applied  # noqa: E501

        :return: The expires_at of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Filter.

        When the filter should no longer be applied  # noqa: E501

        :param expires_at: The expires_at of this Filter.  # noqa: E501
        :type: object
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def irreversible(self):
        """Gets the irreversible of this Filter.  # noqa: E501

        Should matching entities in home and notifications be dropped by the server?  # noqa: E501

        :return: The irreversible of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._irreversible

    @irreversible.setter
    def irreversible(self, irreversible):
        """Sets the irreversible of this Filter.

        Should matching entities in home and notifications be dropped by the server?  # noqa: E501

        :param irreversible: The irreversible of this Filter.  # noqa: E501
        :type: object
        """
        if irreversible is None:
            raise ValueError("Invalid value for `irreversible`, must not be `None`")  # noqa: E501

        self._irreversible = irreversible

    @property
    def whole_word(self):
        """Gets the whole_word of this Filter.  # noqa: E501

        Should the filter consider word boundaries?  # noqa: E501

        :return: The whole_word of this Filter.  # noqa: E501
        :rtype: object
        """
        return self._whole_word

    @whole_word.setter
    def whole_word(self, whole_word):
        """Sets the whole_word of this Filter.

        Should the filter consider word boundaries?  # noqa: E501

        :param whole_word: The whole_word of this Filter.  # noqa: E501
        :type: object
        """
        if whole_word is None:
            raise ValueError("Invalid value for `whole_word`, must not be `None`")  # noqa: E501

        self._whole_word = whole_word

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Filter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Filter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
