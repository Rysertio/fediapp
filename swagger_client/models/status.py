# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Status(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'uri': 'object',
        'created_at': 'object',
        'account': 'Account',
        'content': 'object',
        'visibility': 'object',
        'sensitive': 'object',
        'spoiler_text': 'object',
        'media_attachements': 'object',
        'application': 'Application',
        'url': 'object',
        'in_reply_to_id': 'object',
        'in_reply_to_account_id': 'object',
        'reblog': 'Status',
        'poll': 'Poll',
        'card': 'Card',
        'language': 'object',
        'text': 'object',
        'mentions': 'object',
        'tags': 'object',
        'emojis': 'object',
        'reblogs_count': 'object',
        'favourites_count': 'object',
        'replies_count': 'object',
        'favourited': 'object',
        'reblogged': 'object',
        'muted': 'object',
        'bookmarked': 'object',
        'pinned': 'object'
    }

    attribute_map = {
        'id': 'id',
        'uri': 'uri',
        'created_at': 'created_at',
        'account': 'account',
        'content': 'content',
        'visibility': 'visibility',
        'sensitive': 'sensitive',
        'spoiler_text': 'spoiler_text',
        'media_attachements': 'media_attachements',
        'application': 'application',
        'url': 'url',
        'in_reply_to_id': 'in_reply_to_id',
        'in_reply_to_account_id': 'in_reply_to_account_id',
        'reblog': 'reblog',
        'poll': 'poll',
        'card': 'card',
        'language': 'language',
        'text': 'text',
        'mentions': 'mentions',
        'tags': 'tags',
        'emojis': 'emojis',
        'reblogs_count': 'reblogs_count',
        'favourites_count': 'favourites_count',
        'replies_count': 'replies_count',
        'favourited': 'favourited',
        'reblogged': 'reblogged',
        'muted': 'muted',
        'bookmarked': 'bookmarked',
        'pinned': 'pinned'
    }

    def __init__(self, id=None, uri=None, created_at=None, account=None, content=None, visibility=None, sensitive=None, spoiler_text=None, media_attachements=None, application=None, url=None, in_reply_to_id=None, in_reply_to_account_id=None, reblog=None, poll=None, card=None, language=None, text=None, mentions=None, tags=None, emojis=None, reblogs_count=None, favourites_count=None, replies_count=None, favourited=None, reblogged=None, muted=None, bookmarked=None, pinned=None):  # noqa: E501
        """Status - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uri = None
        self._created_at = None
        self._account = None
        self._content = None
        self._visibility = None
        self._sensitive = None
        self._spoiler_text = None
        self._media_attachements = None
        self._application = None
        self._url = None
        self._in_reply_to_id = None
        self._in_reply_to_account_id = None
        self._reblog = None
        self._poll = None
        self._card = None
        self._language = None
        self._text = None
        self._mentions = None
        self._tags = None
        self._emojis = None
        self._reblogs_count = None
        self._favourites_count = None
        self._replies_count = None
        self._favourited = None
        self._reblogged = None
        self._muted = None
        self._bookmarked = None
        self._pinned = None
        self.discriminator = None
        self.id = id
        self.uri = uri
        self.created_at = created_at
        self.account = account
        self.content = content
        self.visibility = visibility
        self.sensitive = sensitive
        self.spoiler_text = spoiler_text
        self.media_attachements = media_attachements
        self.application = application
        if url is not None:
            self.url = url
        if in_reply_to_id is not None:
            self.in_reply_to_id = in_reply_to_id
        if in_reply_to_account_id is not None:
            self.in_reply_to_account_id = in_reply_to_account_id
        if reblog is not None:
            self.reblog = reblog
        if poll is not None:
            self.poll = poll
        if card is not None:
            self.card = card
        if language is not None:
            self.language = language
        if text is not None:
            self.text = text
        self.mentions = mentions
        self.tags = tags
        self.emojis = emojis
        self.reblogs_count = reblogs_count
        self.favourites_count = favourites_count
        self.replies_count = replies_count
        if favourited is not None:
            self.favourited = favourited
        if reblogged is not None:
            self.reblogged = reblogged
        if muted is not None:
            self.muted = muted
        if bookmarked is not None:
            self.bookmarked = bookmarked
        if pinned is not None:
            self.pinned = pinned

    @property
    def id(self):
        """Gets the id of this Status.  # noqa: E501

        ID of the status in the database. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Status.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Status.

        ID of the status in the database. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Status.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this Status.  # noqa: E501

        URI of the status used for federation.  # noqa: E501

        :return: The uri of this Status.  # noqa: E501
        :rtype: object
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this Status.

        URI of the status used for federation.  # noqa: E501

        :param uri: The uri of this Status.  # noqa: E501
        :type: object
        """
        if uri is None:
            raise ValueError("Invalid value for `uri`, must not be `None`")  # noqa: E501

        self._uri = uri

    @property
    def created_at(self):
        """Gets the created_at of this Status.  # noqa: E501

        The date when this status was created (ISO 8601 DateTime).  # noqa: E501

        :return: The created_at of this Status.  # noqa: E501
        :rtype: object
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Status.

        The date when this status was created (ISO 8601 DateTime).  # noqa: E501

        :param created_at: The created_at of this Status.  # noqa: E501
        :type: object
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def account(self):
        """Gets the account of this Status.  # noqa: E501


        :return: The account of this Status.  # noqa: E501
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this Status.


        :param account: The account of this Status.  # noqa: E501
        :type: Account
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    @property
    def content(self):
        """Gets the content of this Status.  # noqa: E501

        HTML-encoded status content.  # noqa: E501

        :return: The content of this Status.  # noqa: E501
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Status.

        HTML-encoded status content.  # noqa: E501

        :param content: The content of this Status.  # noqa: E501
        :type: object
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def visibility(self):
        """Gets the visibility of this Status.  # noqa: E501

        Visibility of this status. - `public` = Visible to everyone, shown in public timelines. - `unlisted` = Visible to public, but not included in public timelines. - `private` = Visible to followers only, and to any mentioned users. - `direct` = Visible only to mentioned users.  # noqa: E501

        :return: The visibility of this Status.  # noqa: E501
        :rtype: object
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this Status.

        Visibility of this status. - `public` = Visible to everyone, shown in public timelines. - `unlisted` = Visible to public, but not included in public timelines. - `private` = Visible to followers only, and to any mentioned users. - `direct` = Visible only to mentioned users.  # noqa: E501

        :param visibility: The visibility of this Status.  # noqa: E501
        :type: object
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def sensitive(self):
        """Gets the sensitive of this Status.  # noqa: E501

        Is the status marked as sensitive content?  # noqa: E501

        :return: The sensitive of this Status.  # noqa: E501
        :rtype: object
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this Status.

        Is the status marked as sensitive content?  # noqa: E501

        :param sensitive: The sensitive of this Status.  # noqa: E501
        :type: object
        """
        if sensitive is None:
            raise ValueError("Invalid value for `sensitive`, must not be `None`")  # noqa: E501

        self._sensitive = sensitive

    @property
    def spoiler_text(self):
        """Gets the spoiler_text of this Status.  # noqa: E501

        Subject or summary line, below which status content is collapsed until expanded.  # noqa: E501

        :return: The spoiler_text of this Status.  # noqa: E501
        :rtype: object
        """
        return self._spoiler_text

    @spoiler_text.setter
    def spoiler_text(self, spoiler_text):
        """Sets the spoiler_text of this Status.

        Subject or summary line, below which status content is collapsed until expanded.  # noqa: E501

        :param spoiler_text: The spoiler_text of this Status.  # noqa: E501
        :type: object
        """
        if spoiler_text is None:
            raise ValueError("Invalid value for `spoiler_text`, must not be `None`")  # noqa: E501

        self._spoiler_text = spoiler_text

    @property
    def media_attachements(self):
        """Gets the media_attachements of this Status.  # noqa: E501

        Media that is attached to this status.  # noqa: E501

        :return: The media_attachements of this Status.  # noqa: E501
        :rtype: object
        """
        return self._media_attachements

    @media_attachements.setter
    def media_attachements(self, media_attachements):
        """Sets the media_attachements of this Status.

        Media that is attached to this status.  # noqa: E501

        :param media_attachements: The media_attachements of this Status.  # noqa: E501
        :type: object
        """
        if media_attachements is None:
            raise ValueError("Invalid value for `media_attachements`, must not be `None`")  # noqa: E501

        self._media_attachements = media_attachements

    @property
    def application(self):
        """Gets the application of this Status.  # noqa: E501


        :return: The application of this Status.  # noqa: E501
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this Status.


        :param application: The application of this Status.  # noqa: E501
        :type: Application
        """
        if application is None:
            raise ValueError("Invalid value for `application`, must not be `None`")  # noqa: E501

        self._application = application

    @property
    def url(self):
        """Gets the url of this Status.  # noqa: E501

        A link to the status's HTML representation.  # noqa: E501

        :return: The url of this Status.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Status.

        A link to the status's HTML representation.  # noqa: E501

        :param url: The url of this Status.  # noqa: E501
        :type: object
        """

        self._url = url

    @property
    def in_reply_to_id(self):
        """Gets the in_reply_to_id of this Status.  # noqa: E501

        ID of the status being replied. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :return: The in_reply_to_id of this Status.  # noqa: E501
        :rtype: object
        """
        return self._in_reply_to_id

    @in_reply_to_id.setter
    def in_reply_to_id(self, in_reply_to_id):
        """Sets the in_reply_to_id of this Status.

        ID of the status being replied. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :param in_reply_to_id: The in_reply_to_id of this Status.  # noqa: E501
        :type: object
        """

        self._in_reply_to_id = in_reply_to_id

    @property
    def in_reply_to_account_id(self):
        """Gets the in_reply_to_account_id of this Status.  # noqa: E501

        ID of the account being replied to. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :return: The in_reply_to_account_id of this Status.  # noqa: E501
        :rtype: object
        """
        return self._in_reply_to_account_id

    @in_reply_to_account_id.setter
    def in_reply_to_account_id(self, in_reply_to_account_id):
        """Sets the in_reply_to_account_id of this Status.

        ID of the account being replied to. Cast from integer but not guaranteed to be a number.  # noqa: E501

        :param in_reply_to_account_id: The in_reply_to_account_id of this Status.  # noqa: E501
        :type: object
        """

        self._in_reply_to_account_id = in_reply_to_account_id

    @property
    def reblog(self):
        """Gets the reblog of this Status.  # noqa: E501


        :return: The reblog of this Status.  # noqa: E501
        :rtype: Status
        """
        return self._reblog

    @reblog.setter
    def reblog(self, reblog):
        """Sets the reblog of this Status.


        :param reblog: The reblog of this Status.  # noqa: E501
        :type: Status
        """

        self._reblog = reblog

    @property
    def poll(self):
        """Gets the poll of this Status.  # noqa: E501


        :return: The poll of this Status.  # noqa: E501
        :rtype: Poll
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this Status.


        :param poll: The poll of this Status.  # noqa: E501
        :type: Poll
        """

        self._poll = poll

    @property
    def card(self):
        """Gets the card of this Status.  # noqa: E501


        :return: The card of this Status.  # noqa: E501
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card):
        """Sets the card of this Status.


        :param card: The card of this Status.  # noqa: E501
        :type: Card
        """

        self._card = card

    @property
    def language(self):
        """Gets the language of this Status.  # noqa: E501

        Primary langauge of this status. ISO 639 Part 1 two-letter langauge code.  # noqa: E501

        :return: The language of this Status.  # noqa: E501
        :rtype: object
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Status.

        Primary langauge of this status. ISO 639 Part 1 two-letter langauge code.  # noqa: E501

        :param language: The language of this Status.  # noqa: E501
        :type: object
        """

        self._language = language

    @property
    def text(self):
        """Gets the text of this Status.  # noqa: E501

        Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.  # noqa: E501

        :return: The text of this Status.  # noqa: E501
        :rtype: object
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Status.

        Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.  # noqa: E501

        :param text: The text of this Status.  # noqa: E501
        :type: object
        """

        self._text = text

    @property
    def mentions(self):
        """Gets the mentions of this Status.  # noqa: E501

        Mentions of users within the status content.  # noqa: E501

        :return: The mentions of this Status.  # noqa: E501
        :rtype: object
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this Status.

        Mentions of users within the status content.  # noqa: E501

        :param mentions: The mentions of this Status.  # noqa: E501
        :type: object
        """
        if mentions is None:
            raise ValueError("Invalid value for `mentions`, must not be `None`")  # noqa: E501

        self._mentions = mentions

    @property
    def tags(self):
        """Gets the tags of this Status.  # noqa: E501

        Hashtags used within the status content.  # noqa: E501

        :return: The tags of this Status.  # noqa: E501
        :rtype: object
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Status.

        Hashtags used within the status content.  # noqa: E501

        :param tags: The tags of this Status.  # noqa: E501
        :type: object
        """
        if tags is None:
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    @property
    def emojis(self):
        """Gets the emojis of this Status.  # noqa: E501

        Custom emoji to be used while rendering status content.  # noqa: E501

        :return: The emojis of this Status.  # noqa: E501
        :rtype: object
        """
        return self._emojis

    @emojis.setter
    def emojis(self, emojis):
        """Sets the emojis of this Status.

        Custom emoji to be used while rendering status content.  # noqa: E501

        :param emojis: The emojis of this Status.  # noqa: E501
        :type: object
        """
        if emojis is None:
            raise ValueError("Invalid value for `emojis`, must not be `None`")  # noqa: E501

        self._emojis = emojis

    @property
    def reblogs_count(self):
        """Gets the reblogs_count of this Status.  # noqa: E501

        How many boosts this status has received.  # noqa: E501

        :return: The reblogs_count of this Status.  # noqa: E501
        :rtype: object
        """
        return self._reblogs_count

    @reblogs_count.setter
    def reblogs_count(self, reblogs_count):
        """Sets the reblogs_count of this Status.

        How many boosts this status has received.  # noqa: E501

        :param reblogs_count: The reblogs_count of this Status.  # noqa: E501
        :type: object
        """
        if reblogs_count is None:
            raise ValueError("Invalid value for `reblogs_count`, must not be `None`")  # noqa: E501

        self._reblogs_count = reblogs_count

    @property
    def favourites_count(self):
        """Gets the favourites_count of this Status.  # noqa: E501

        How many favourites this status has received.  # noqa: E501

        :return: The favourites_count of this Status.  # noqa: E501
        :rtype: object
        """
        return self._favourites_count

    @favourites_count.setter
    def favourites_count(self, favourites_count):
        """Sets the favourites_count of this Status.

        How many favourites this status has received.  # noqa: E501

        :param favourites_count: The favourites_count of this Status.  # noqa: E501
        :type: object
        """
        if favourites_count is None:
            raise ValueError("Invalid value for `favourites_count`, must not be `None`")  # noqa: E501

        self._favourites_count = favourites_count

    @property
    def replies_count(self):
        """Gets the replies_count of this Status.  # noqa: E501

        How many replies this status has received.  # noqa: E501

        :return: The replies_count of this Status.  # noqa: E501
        :rtype: object
        """
        return self._replies_count

    @replies_count.setter
    def replies_count(self, replies_count):
        """Sets the replies_count of this Status.

        How many replies this status has received.  # noqa: E501

        :param replies_count: The replies_count of this Status.  # noqa: E501
        :type: object
        """
        if replies_count is None:
            raise ValueError("Invalid value for `replies_count`, must not be `None`")  # noqa: E501

        self._replies_count = replies_count

    @property
    def favourited(self):
        """Gets the favourited of this Status.  # noqa: E501

        Have you favourited this status?  # noqa: E501

        :return: The favourited of this Status.  # noqa: E501
        :rtype: object
        """
        return self._favourited

    @favourited.setter
    def favourited(self, favourited):
        """Sets the favourited of this Status.

        Have you favourited this status?  # noqa: E501

        :param favourited: The favourited of this Status.  # noqa: E501
        :type: object
        """

        self._favourited = favourited

    @property
    def reblogged(self):
        """Gets the reblogged of this Status.  # noqa: E501

        Have you boosted this status?  # noqa: E501

        :return: The reblogged of this Status.  # noqa: E501
        :rtype: object
        """
        return self._reblogged

    @reblogged.setter
    def reblogged(self, reblogged):
        """Sets the reblogged of this Status.

        Have you boosted this status?  # noqa: E501

        :param reblogged: The reblogged of this Status.  # noqa: E501
        :type: object
        """

        self._reblogged = reblogged

    @property
    def muted(self):
        """Gets the muted of this Status.  # noqa: E501

        Have you muted notifications for this status's conversation?  # noqa: E501

        :return: The muted of this Status.  # noqa: E501
        :rtype: object
        """
        return self._muted

    @muted.setter
    def muted(self, muted):
        """Sets the muted of this Status.

        Have you muted notifications for this status's conversation?  # noqa: E501

        :param muted: The muted of this Status.  # noqa: E501
        :type: object
        """

        self._muted = muted

    @property
    def bookmarked(self):
        """Gets the bookmarked of this Status.  # noqa: E501

        Have you bookmarked this status?  # noqa: E501

        :return: The bookmarked of this Status.  # noqa: E501
        :rtype: object
        """
        return self._bookmarked

    @bookmarked.setter
    def bookmarked(self, bookmarked):
        """Sets the bookmarked of this Status.

        Have you bookmarked this status?  # noqa: E501

        :param bookmarked: The bookmarked of this Status.  # noqa: E501
        :type: object
        """

        self._bookmarked = bookmarked

    @property
    def pinned(self):
        """Gets the pinned of this Status.  # noqa: E501

        Have you pinned this status? Only appears if the status is pinnable.  # noqa: E501

        :return: The pinned of this Status.  # noqa: E501
        :rtype: object
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this Status.

        Have you pinned this status? Only appears if the status is pinnable.  # noqa: E501

        :param pinned: The pinned of this Status.  # noqa: E501
        :type: object
        """

        self._pinned = pinned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Status, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Status):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
