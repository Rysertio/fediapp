# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Mention(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'username': 'object',
        'acct': 'object',
        'url': 'object'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'acct': 'acct',
        'url': 'url'
    }

    def __init__(self, id=None, username=None, acct=None, url=None):  # noqa: E501
        """Mention - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._username = None
        self._acct = None
        self._url = None
        self.discriminator = None
        self.id = id
        self.username = username
        self.acct = acct
        self.url = url

    @property
    def id(self):
        """Gets the id of this Mention.  # noqa: E501

        The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Mention.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Mention.

        The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Mention.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def username(self):
        """Gets the username of this Mention.  # noqa: E501

        The username of the mentioned user.  # noqa: E501

        :return: The username of this Mention.  # noqa: E501
        :rtype: object
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Mention.

        The username of the mentioned user.  # noqa: E501

        :param username: The username of this Mention.  # noqa: E501
        :type: object
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def acct(self):
        """Gets the acct of this Mention.  # noqa: E501

        The webfinger acct: URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.  # noqa: E501

        :return: The acct of this Mention.  # noqa: E501
        :rtype: object
        """
        return self._acct

    @acct.setter
    def acct(self, acct):
        """Sets the acct of this Mention.

        The webfinger acct: URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.  # noqa: E501

        :param acct: The acct of this Mention.  # noqa: E501
        :type: object
        """
        if acct is None:
            raise ValueError("Invalid value for `acct`, must not be `None`")  # noqa: E501

        self._acct = acct

    @property
    def url(self):
        """Gets the url of this Mention.  # noqa: E501

        The location of the mentioned user's profile.  # noqa: E501

        :return: The url of this Mention.  # noqa: E501
        :rtype: object
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Mention.

        The location of the mentioned user's profile.  # noqa: E501

        :param url: The url of this Mention.  # noqa: E501
        :type: object
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Mention, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Mention):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
