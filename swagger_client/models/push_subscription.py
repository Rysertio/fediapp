# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PushSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'endpoint': 'object',
        'server_key': 'object',
        'alerts': 'PushSubscriptionAlerts'
    }

    attribute_map = {
        'id': 'id',
        'endpoint': 'endpoint',
        'server_key': 'server_key',
        'alerts': 'alerts'
    }

    def __init__(self, id=None, endpoint=None, server_key=None, alerts=None):  # noqa: E501
        """PushSubscription - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._endpoint = None
        self._server_key = None
        self._alerts = None
        self.discriminator = None
        self.id = id
        self.endpoint = endpoint
        self.server_key = server_key
        self.alerts = alerts

    @property
    def id(self):
        """Gets the id of this PushSubscription.  # noqa: E501

        The id of the push subscription in the database.  # noqa: E501

        :return: The id of this PushSubscription.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PushSubscription.

        The id of the push subscription in the database.  # noqa: E501

        :param id: The id of this PushSubscription.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def endpoint(self):
        """Gets the endpoint of this PushSubscription.  # noqa: E501

        Where push alerts will be sent to.  # noqa: E501

        :return: The endpoint of this PushSubscription.  # noqa: E501
        :rtype: object
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this PushSubscription.

        Where push alerts will be sent to.  # noqa: E501

        :param endpoint: The endpoint of this PushSubscription.  # noqa: E501
        :type: object
        """
        if endpoint is None:
            raise ValueError("Invalid value for `endpoint`, must not be `None`")  # noqa: E501

        self._endpoint = endpoint

    @property
    def server_key(self):
        """Gets the server_key of this PushSubscription.  # noqa: E501

        The streaming server's VAPID key.  # noqa: E501

        :return: The server_key of this PushSubscription.  # noqa: E501
        :rtype: object
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this PushSubscription.

        The streaming server's VAPID key.  # noqa: E501

        :param server_key: The server_key of this PushSubscription.  # noqa: E501
        :type: object
        """
        if server_key is None:
            raise ValueError("Invalid value for `server_key`, must not be `None`")  # noqa: E501

        self._server_key = server_key

    @property
    def alerts(self):
        """Gets the alerts of this PushSubscription.  # noqa: E501


        :return: The alerts of this PushSubscription.  # noqa: E501
        :rtype: PushSubscriptionAlerts
        """
        return self._alerts

    @alerts.setter
    def alerts(self, alerts):
        """Sets the alerts of this PushSubscription.


        :param alerts: The alerts of this PushSubscription.  # noqa: E501
        :type: PushSubscriptionAlerts
        """
        if alerts is None:
            raise ValueError("Invalid value for `alerts`, must not be `None`")  # noqa: E501

        self._alerts = alerts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PushSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PushSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
