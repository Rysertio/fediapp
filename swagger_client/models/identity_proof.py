# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IdentityProof(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'object',
        'provider_username': 'object',
        'profile_url': 'object',
        'proof_url': 'object',
        'updated_at': 'object'
    }

    attribute_map = {
        'provider': 'provider',
        'provider_username': 'provider_username',
        'profile_url': 'profile_url',
        'proof_url': 'proof_url',
        'updated_at': 'updated_at'
    }

    def __init__(self, provider=None, provider_username=None, profile_url=None, proof_url=None, updated_at=None):  # noqa: E501
        """IdentityProof - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._provider_username = None
        self._profile_url = None
        self._proof_url = None
        self._updated_at = None
        self.discriminator = None
        self.provider = provider
        self.provider_username = provider_username
        self.profile_url = profile_url
        self.proof_url = proof_url
        self.updated_at = updated_at

    @property
    def provider(self):
        """Gets the provider of this IdentityProof.  # noqa: E501

        The name of the identity provider.  # noqa: E501

        :return: The provider of this IdentityProof.  # noqa: E501
        :rtype: object
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this IdentityProof.

        The name of the identity provider.  # noqa: E501

        :param provider: The provider of this IdentityProof.  # noqa: E501
        :type: object
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def provider_username(self):
        """Gets the provider_username of this IdentityProof.  # noqa: E501

        The account owner's username on the identity provider's service.  # noqa: E501

        :return: The provider_username of this IdentityProof.  # noqa: E501
        :rtype: object
        """
        return self._provider_username

    @provider_username.setter
    def provider_username(self, provider_username):
        """Sets the provider_username of this IdentityProof.

        The account owner's username on the identity provider's service.  # noqa: E501

        :param provider_username: The provider_username of this IdentityProof.  # noqa: E501
        :type: object
        """
        if provider_username is None:
            raise ValueError("Invalid value for `provider_username`, must not be `None`")  # noqa: E501

        self._provider_username = provider_username

    @property
    def profile_url(self):
        """Gets the profile_url of this IdentityProof.  # noqa: E501

        The account owner's profile URL on the identity provider.  # noqa: E501

        :return: The profile_url of this IdentityProof.  # noqa: E501
        :rtype: object
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url):
        """Sets the profile_url of this IdentityProof.

        The account owner's profile URL on the identity provider.  # noqa: E501

        :param profile_url: The profile_url of this IdentityProof.  # noqa: E501
        :type: object
        """
        if profile_url is None:
            raise ValueError("Invalid value for `profile_url`, must not be `None`")  # noqa: E501

        self._profile_url = profile_url

    @property
    def proof_url(self):
        """Gets the proof_url of this IdentityProof.  # noqa: E501

        A link to a statement of identity proof, hosted by the identity provider.  # noqa: E501

        :return: The proof_url of this IdentityProof.  # noqa: E501
        :rtype: object
        """
        return self._proof_url

    @proof_url.setter
    def proof_url(self, proof_url):
        """Sets the proof_url of this IdentityProof.

        A link to a statement of identity proof, hosted by the identity provider.  # noqa: E501

        :param proof_url: The proof_url of this IdentityProof.  # noqa: E501
        :type: object
        """
        if proof_url is None:
            raise ValueError("Invalid value for `proof_url`, must not be `None`")  # noqa: E501

        self._proof_url = proof_url

    @property
    def updated_at(self):
        """Gets the updated_at of this IdentityProof.  # noqa: E501

        When the identity proof was last updated. ISO 8601 DateTime.  # noqa: E501

        :return: The updated_at of this IdentityProof.  # noqa: E501
        :rtype: object
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this IdentityProof.

        When the identity proof was last updated. ISO 8601 DateTime.  # noqa: E501

        :param updated_at: The updated_at of this IdentityProof.  # noqa: E501
        :type: object
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IdentityProof, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityProof):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
