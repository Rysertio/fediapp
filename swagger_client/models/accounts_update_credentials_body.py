# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountsUpdateCredentialsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discoverable': 'object',
        'bot': 'object',
        'display_name': 'object',
        'note': 'object',
        'avatar': 'object',
        'header': 'object',
        'locked': 'object',
        'source': 'Apiv1accountsupdateCredentialsSource',
        'fields_attributes': 'object'
    }

    attribute_map = {
        'discoverable': 'discoverable',
        'bot': 'bot',
        'display_name': 'display_name',
        'note': 'note',
        'avatar': 'avatar',
        'header': 'header',
        'locked': 'locked',
        'source': 'source',
        'fields_attributes': 'fields_attributes'
    }

    def __init__(self, discoverable=None, bot=None, display_name=None, note=None, avatar=None, header=None, locked=None, source=None, fields_attributes=None):  # noqa: E501
        """AccountsUpdateCredentialsBody - a model defined in Swagger"""  # noqa: E501
        self._discoverable = None
        self._bot = None
        self._display_name = None
        self._note = None
        self._avatar = None
        self._header = None
        self._locked = None
        self._source = None
        self._fields_attributes = None
        self.discriminator = None
        if discoverable is not None:
            self.discoverable = discoverable
        if bot is not None:
            self.bot = bot
        if display_name is not None:
            self.display_name = display_name
        if note is not None:
            self.note = note
        if avatar is not None:
            self.avatar = avatar
        if header is not None:
            self.header = header
        if locked is not None:
            self.locked = locked
        if source is not None:
            self.source = source
        if fields_attributes is not None:
            self.fields_attributes = fields_attributes

    @property
    def discoverable(self):
        """Gets the discoverable of this AccountsUpdateCredentialsBody.  # noqa: E501

        Whether the account should be shown in the user profile directory.  # noqa: E501

        :return: The discoverable of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._discoverable

    @discoverable.setter
    def discoverable(self, discoverable):
        """Sets the discoverable of this AccountsUpdateCredentialsBody.

        Whether the account should be shown in the user profile directory.  # noqa: E501

        :param discoverable: The discoverable of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._discoverable = discoverable

    @property
    def bot(self):
        """Gets the bot of this AccountsUpdateCredentialsBody.  # noqa: E501

        Whether the account has a bot flag.  # noqa: E501

        :return: The bot of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._bot

    @bot.setter
    def bot(self, bot):
        """Sets the bot of this AccountsUpdateCredentialsBody.

        Whether the account has a bot flag.  # noqa: E501

        :param bot: The bot of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._bot = bot

    @property
    def display_name(self):
        """Gets the display_name of this AccountsUpdateCredentialsBody.  # noqa: E501

        The display name to use for the profile.  # noqa: E501

        :return: The display_name of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AccountsUpdateCredentialsBody.

        The display name to use for the profile.  # noqa: E501

        :param display_name: The display_name of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._display_name = display_name

    @property
    def note(self):
        """Gets the note of this AccountsUpdateCredentialsBody.  # noqa: E501

        The account bio.  # noqa: E501

        :return: The note of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this AccountsUpdateCredentialsBody.

        The account bio.  # noqa: E501

        :param note: The note of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._note = note

    @property
    def avatar(self):
        """Gets the avatar of this AccountsUpdateCredentialsBody.  # noqa: E501

        Avatar image encoded using multipart / form data.  # noqa: E501

        :return: The avatar of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this AccountsUpdateCredentialsBody.

        Avatar image encoded using multipart / form data.  # noqa: E501

        :param avatar: The avatar of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._avatar = avatar

    @property
    def header(self):
        """Gets the header of this AccountsUpdateCredentialsBody.  # noqa: E501

        Header image encoded using multipart / form data.  # noqa: E501

        :return: The header of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this AccountsUpdateCredentialsBody.

        Header image encoded using multipart / form data.  # noqa: E501

        :param header: The header of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._header = header

    @property
    def locked(self):
        """Gets the locked of this AccountsUpdateCredentialsBody.  # noqa: E501

        Whether manual approval of follow requests is required.  # noqa: E501

        :return: The locked of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this AccountsUpdateCredentialsBody.

        Whether manual approval of follow requests is required.  # noqa: E501

        :param locked: The locked of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._locked = locked

    @property
    def source(self):
        """Gets the source of this AccountsUpdateCredentialsBody.  # noqa: E501


        :return: The source of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: Apiv1accountsupdateCredentialsSource
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AccountsUpdateCredentialsBody.


        :param source: The source of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: Apiv1accountsupdateCredentialsSource
        """

        self._source = source

    @property
    def fields_attributes(self):
        """Gets the fields_attributes of this AccountsUpdateCredentialsBody.  # noqa: E501

        Profile metadata `name` and `value`. (By default, max 4 fields and 255 characters per property / value).  # noqa: E501

        :return: The fields_attributes of this AccountsUpdateCredentialsBody.  # noqa: E501
        :rtype: object
        """
        return self._fields_attributes

    @fields_attributes.setter
    def fields_attributes(self, fields_attributes):
        """Sets the fields_attributes of this AccountsUpdateCredentialsBody.

        Profile metadata `name` and `value`. (By default, max 4 fields and 255 characters per property / value).  # noqa: E501

        :param fields_attributes: The fields_attributes of this AccountsUpdateCredentialsBody.  # noqa: E501
        :type: object
        """

        self._fields_attributes = fields_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountsUpdateCredentialsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountsUpdateCredentialsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
