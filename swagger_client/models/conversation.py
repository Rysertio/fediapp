# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Conversation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'accounts': 'object',
        'unread': 'object',
        'last_status': 'Status'
    }

    attribute_map = {
        'id': 'id',
        'accounts': 'accounts',
        'unread': 'unread',
        'last_status': 'last_status'
    }

    def __init__(self, id=None, accounts=None, unread=None, last_status=None):  # noqa: E501
        """Conversation - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._accounts = None
        self._unread = None
        self._last_status = None
        self.discriminator = None
        self.id = id
        self.accounts = accounts
        self.unread = unread
        if last_status is not None:
            self.last_status = last_status

    @property
    def id(self):
        """Gets the id of this Conversation.  # noqa: E501

        Local database ID of the conversation.  # noqa: E501

        :return: The id of this Conversation.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conversation.

        Local database ID of the conversation.  # noqa: E501

        :param id: The id of this Conversation.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def accounts(self):
        """Gets the accounts of this Conversation.  # noqa: E501

        Participants in the conversation.  # noqa: E501

        :return: The accounts of this Conversation.  # noqa: E501
        :rtype: object
        """
        return self._accounts

    @accounts.setter
    def accounts(self, accounts):
        """Sets the accounts of this Conversation.

        Participants in the conversation.  # noqa: E501

        :param accounts: The accounts of this Conversation.  # noqa: E501
        :type: object
        """
        if accounts is None:
            raise ValueError("Invalid value for `accounts`, must not be `None`")  # noqa: E501

        self._accounts = accounts

    @property
    def unread(self):
        """Gets the unread of this Conversation.  # noqa: E501

        Is the conversation currently marked as unread?  # noqa: E501

        :return: The unread of this Conversation.  # noqa: E501
        :rtype: object
        """
        return self._unread

    @unread.setter
    def unread(self, unread):
        """Sets the unread of this Conversation.

        Is the conversation currently marked as unread?  # noqa: E501

        :param unread: The unread of this Conversation.  # noqa: E501
        :type: object
        """
        if unread is None:
            raise ValueError("Invalid value for `unread`, must not be `None`")  # noqa: E501

        self._unread = unread

    @property
    def last_status(self):
        """Gets the last_status of this Conversation.  # noqa: E501


        :return: The last_status of this Conversation.  # noqa: E501
        :rtype: Status
        """
        return self._last_status

    @last_status.setter
    def last_status(self, last_status):
        """Sets the last_status of this Conversation.


        :param last_status: The last_status of this Conversation.  # noqa: E501
        :type: Status
        """

        self._last_status = last_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Conversation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
