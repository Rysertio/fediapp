# coding: utf-8

"""
    Mastodon API

    The API for interacting with Mastodon.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Poll(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'object',
        'expires_at': 'object',
        'expired': 'object',
        'multiple': 'object',
        'votes_count': 'object',
        'voters_count': 'object',
        'voted': 'object',
        'own_votes': 'object',
        'options': 'object',
        'emojis': 'object'
    }

    attribute_map = {
        'id': 'id',
        'expires_at': 'expires_at',
        'expired': 'expired',
        'multiple': 'multiple',
        'votes_count': 'votes_count',
        'voters_count': 'voters_count',
        'voted': 'voted',
        'own_votes': 'own_votes',
        'options': 'options',
        'emojis': 'emojis'
    }

    def __init__(self, id=None, expires_at=None, expired=None, multiple=None, votes_count=None, voters_count=None, voted=None, own_votes=None, options=None, emojis=None):  # noqa: E501
        """Poll - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._expires_at = None
        self._expired = None
        self._multiple = None
        self._votes_count = None
        self._voters_count = None
        self._voted = None
        self._own_votes = None
        self._options = None
        self._emojis = None
        self.discriminator = None
        self.id = id
        if expires_at is not None:
            self.expires_at = expires_at
        self.expired = expired
        self.multiple = multiple
        self.votes_count = votes_count
        if voters_count is not None:
            self.voters_count = voters_count
        if voted is not None:
            self.voted = voted
        if own_votes is not None:
            self.own_votes = own_votes
        self.options = options
        self.emojis = emojis

    @property
    def id(self):
        """Gets the id of this Poll.  # noqa: E501

        The ID of the poll in the database. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Poll.

        The ID of the poll in the database. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Poll.  # noqa: E501
        :type: object
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def expires_at(self):
        """Gets the expires_at of this Poll.  # noqa: E501

        When the poll ends. ISO8601 DateTime or null if the poll does not end.  # noqa: E501

        :return: The expires_at of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this Poll.

        When the poll ends. ISO8601 DateTime or null if the poll does not end.  # noqa: E501

        :param expires_at: The expires_at of this Poll.  # noqa: E501
        :type: object
        """

        self._expires_at = expires_at

    @property
    def expired(self):
        """Gets the expired of this Poll.  # noqa: E501

        Is the poll currently expired?  # noqa: E501

        :return: The expired of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._expired

    @expired.setter
    def expired(self, expired):
        """Sets the expired of this Poll.

        Is the poll currently expired?  # noqa: E501

        :param expired: The expired of this Poll.  # noqa: E501
        :type: object
        """
        if expired is None:
            raise ValueError("Invalid value for `expired`, must not be `None`")  # noqa: E501

        self._expired = expired

    @property
    def multiple(self):
        """Gets the multiple of this Poll.  # noqa: E501

        Does the poll allow multiple-choice answers?  # noqa: E501

        :return: The multiple of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this Poll.

        Does the poll allow multiple-choice answers?  # noqa: E501

        :param multiple: The multiple of this Poll.  # noqa: E501
        :type: object
        """
        if multiple is None:
            raise ValueError("Invalid value for `multiple`, must not be `None`")  # noqa: E501

        self._multiple = multiple

    @property
    def votes_count(self):
        """Gets the votes_count of this Poll.  # noqa: E501

        How many votes have been recieved.  # noqa: E501

        :return: The votes_count of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._votes_count

    @votes_count.setter
    def votes_count(self, votes_count):
        """Sets the votes_count of this Poll.

        How many votes have been recieved.  # noqa: E501

        :param votes_count: The votes_count of this Poll.  # noqa: E501
        :type: object
        """
        if votes_count is None:
            raise ValueError("Invalid value for `votes_count`, must not be `None`")  # noqa: E501

        self._votes_count = votes_count

    @property
    def voters_count(self):
        """Gets the voters_count of this Poll.  # noqa: E501

        How many unique accounts have voted on a multiple choice poll. Null if `multiple` is false.  # noqa: E501

        :return: The voters_count of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._voters_count

    @voters_count.setter
    def voters_count(self, voters_count):
        """Sets the voters_count of this Poll.

        How many unique accounts have voted on a multiple choice poll. Null if `multiple` is false.  # noqa: E501

        :param voters_count: The voters_count of this Poll.  # noqa: E501
        :type: object
        """

        self._voters_count = voters_count

    @property
    def voted(self):
        """Gets the voted of this Poll.  # noqa: E501

        When called with a user token, has the authorized user voted?  # noqa: E501

        :return: The voted of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._voted

    @voted.setter
    def voted(self, voted):
        """Sets the voted of this Poll.

        When called with a user token, has the authorized user voted?  # noqa: E501

        :param voted: The voted of this Poll.  # noqa: E501
        :type: object
        """

        self._voted = voted

    @property
    def own_votes(self):
        """Gets the own_votes of this Poll.  # noqa: E501

        When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`.  # noqa: E501

        :return: The own_votes of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._own_votes

    @own_votes.setter
    def own_votes(self, own_votes):
        """Sets the own_votes of this Poll.

        When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`.  # noqa: E501

        :param own_votes: The own_votes of this Poll.  # noqa: E501
        :type: object
        """

        self._own_votes = own_votes

    @property
    def options(self):
        """Gets the options of this Poll.  # noqa: E501

        Possible answers for the poll.  # noqa: E501

        :return: The options of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Poll.

        Possible answers for the poll.  # noqa: E501

        :param options: The options of this Poll.  # noqa: E501
        :type: object
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def emojis(self):
        """Gets the emojis of this Poll.  # noqa: E501

        Custom emoji to be used for rendering poll options.  # noqa: E501

        :return: The emojis of this Poll.  # noqa: E501
        :rtype: object
        """
        return self._emojis

    @emojis.setter
    def emojis(self, emojis):
        """Sets the emojis of this Poll.

        Custom emoji to be used for rendering poll options.  # noqa: E501

        :param emojis: The emojis of this Poll.  # noqa: E501
        :type: object
        """
        if emojis is None:
            raise ValueError("Invalid value for `emojis`, must not be `None`")  # noqa: E501

        self._emojis = emojis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Poll, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Poll):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
